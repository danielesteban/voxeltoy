!function(){"use strict";function e(){}function n(e){return e()}function t(){return Object.create(null)}function r(e){e.forEach(n)}function o(e){return"function"==typeof e}function i(e,n){return e!=e?n==n:e!==n||e&&"object"==typeof e||"function"==typeof e}function s(n,t,r){n.$$.on_destroy.push(function(n,...t){if(null==n)return e;const r=n.subscribe(...t);return r.unsubscribe?()=>r.unsubscribe():r}(t,r))}function a(e,n,t,r){if(e){const o=c(e,n,t,r);return e[0](o)}}function c(e,n,t,r){return e[1]&&r?function(e,n){for(const t in n)e[t]=n[t];return e}(t.ctx.slice(),e[1](r(n))):t.ctx}function u(e,n,t,r){if(e[2]&&r){const o=e[2](r(t));if(void 0===n.dirty)return o;if("object"==typeof o){const e=[],t=Math.max(n.dirty.length,o.length);for(let r=0;r<t;r+=1)e[r]=n.dirty[r]|o[r];return e}return n.dirty|o}return n.dirty}function l(e,n,t,r,o,i){if(o){const s=c(n,t,r,i);e.p(s,o)}}function f(e){if(e.ctx.length>32){const n=[],t=e.ctx.length/32;for(let e=0;e<t;e++)n[e]=-1;return n}return-1}function p(e,n,t){return e.set(t),n}function d(e,n){e.appendChild(n)}function v(e,n,t){e.insertBefore(n,t||null)}function h(e){e.parentNode.removeChild(e)}function m(e,n){for(let t=0;t<e.length;t+=1)e[t]&&e[t].d(n)}function g(e){return document.createElement(e)}function x(e){return document.createTextNode(e)}function y(){return x(" ")}function b(){return x("")}function w(e,n,t,r){return e.addEventListener(n,t,r),()=>e.removeEventListener(n,t,r)}function z(e,n,t){null==t?e.removeAttribute(n):e.getAttribute(n)!==t&&e.setAttribute(n,t)}function $(e){return""===e?null:+e}function k(e,n){n=""+n,e.wholeText!==n&&(e.data=n)}function S(e,n){e.value=null==n?"":n}function E(e,n,t,r){null===t?e.style.removeProperty(n):e.style.setProperty(n,t,r?"important":"")}function T(e,n,t){e.classList[t?"add":"remove"](n)}let _;function M(e){_=e}function P(e){(function(){if(!_)throw new Error("Function called outside component initialization");return _})().$$.on_mount.push(e)}const A=[],B=[],C=[],U=[],R=Promise.resolve();let I=!1;function L(){I||(I=!0,R.then(F))}function V(){return L(),R}function G(e){C.push(e)}const N=new Set;let q=0;function F(){const e=_;do{for(;q<A.length;){const e=A[q];q++,M(e),D(e.$$)}for(M(null),A.length=0,q=0;B.length;)B.pop()();for(let e=0;e<C.length;e+=1){const n=C[e];N.has(n)||(N.add(n),n())}C.length=0}while(A.length);for(;U.length;)U.pop()();I=!1,N.clear(),M(e)}function D(e){if(null!==e.fragment){e.update(),r(e.before_update);const n=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,n),e.after_update.forEach(G)}}const O=new Set;let Y;function j(){Y={r:0,c:[],p:Y}}function W(){Y.r||r(Y.c),Y=Y.p}function X(e,n){e&&e.i&&(O.delete(e),e.i(n))}function Z(e,n,t,r){if(e&&e.o){if(O.has(e))return;O.add(e),Y.c.push((()=>{O.delete(e),r&&(t&&e.d(1),r())})),e.o(n)}else r&&r()}const H="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;function K(e){e&&e.c()}function J(e,t,i,s){const{fragment:a,on_mount:c,on_destroy:u,after_update:l}=e.$$;a&&a.m(t,i),s||G((()=>{const t=c.map(n).filter(o);u?u.push(...t):r(t),e.$$.on_mount=[]})),l.forEach(G)}function Q(e,n){const t=e.$$;null!==t.fragment&&(r(t.on_destroy),t.fragment&&t.fragment.d(n),t.on_destroy=t.fragment=null,t.ctx=[])}function ee(n,o,i,s,a,c,u,l=[-1]){const f=_;M(n);const p=n.$$={fragment:null,ctx:null,props:c,update:e,not_equal:a,bound:t(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(o.context||(f?f.$$.context:[])),callbacks:t(),dirty:l,skip_bound:!1,root:o.target||f.$$.root};u&&u(p.root);let d=!1;if(p.ctx=i?i(n,o.props||{},((e,t,...r)=>{const o=r.length?r[0]:t;return p.ctx&&a(p.ctx[e],p.ctx[e]=o)&&(!p.skip_bound&&p.bound[e]&&p.bound[e](o),d&&function(e,n){-1===e.$$.dirty[0]&&(A.push(e),L(),e.$$.dirty.fill(0)),e.$$.dirty[n/31|0]|=1<<n%31}(n,e)),t})):[],p.update(),d=!0,r(p.before_update),p.fragment=!!s&&s(p.ctx),o.target){if(o.hydrate){const e=function(e){return Array.from(e.childNodes)}(o.target);p.fragment&&p.fragment.l(e),e.forEach(h)}else p.fragment&&p.fragment.c();o.intro&&X(n.$$.fragment),J(n,o.target,o.anchor,o.customElement),F()}M(f)}class ne{$destroy(){Q(this,1),this.$destroy=e}$on(e,n){const t=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return t.push(n),()=>{const e=t.indexOf(n);-1!==e&&t.splice(e,1)}}$set(e){var n;this.$$set&&(n=e,0!==Object.keys(n).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const te=[];function re(n,t=e){let r;const o=new Set;function s(e){if(i(n,e)&&(n=e,r)){const e=!te.length;for(const e of o)e[1](),te.push(e,n);if(e){for(let e=0;e<te.length;e+=2)te[e][0](te[e+1]);te.length=0}}}return{set:s,update:function(e){s(e(n))},subscribe:function(i,a=e){const c=[i,a];return o.add(c),1===o.size&&(r=t(s)||e),i(n),()=>{o.delete(c),0===o.size&&(r(),r=null)}}}}const oe={errors:re([]),source:re("fn getColorAt(texture : i32, pixel : vec2<i32>) -> vec4<f32> {\n  var h : f32 = f32(texture) / f32(atlas.count);\n  var s : f32 = 0.5;\n  var l : f32 = 0.5;\n  if (\n    pixel.x == 0 || pixel.x == (atlas.width - 1)\n    || pixel.y == 0 || pixel.y == (atlas.height - 1)\n  ) {\n    l = min(l * 1.1, 1);\n  }\n  return hsl2Rgba(h, s, l);\n}\n")},ie=["// VoxelToy\n\n// SDF primitives\n// sdBox(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdSphere(p : vec3<f32>, r : f32) -> f32\n// sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32\n\n// SDF operations\n// opUnion(d1 : f32, d2 : f32) -> f32\n// opSubstraction(d1 : f32, d2 : f32) -> f32\n// opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32\n// opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32\n\n// Noise functions\n// noise3(p: vec3<f32>) -> f32\n// simplexNoise3(v: vec3<f32>) -> f32\n\n// Rotation helpers\n// rotateX(rad : f32) -> mat3x3<f32>\n// rotateY(rad : f32) -> mat3x3<f32>\n// rotateZ(rad : f32) -> mat3x3<f32>\n\n// Variables\n// time : f32\n// volume.size : vec3<f32>\n// volume.center : vec3<f32>\n\nfn distanceToScene(pos : vec3<f32>) -> f32 {\n  var origin : vec3<f32> = pos - volume.center;\n  var t : f32 = sin(time * 2);\n  var size : f32 = volume.size.x * (0.25 + t * 0.01);\n  return opSmoothUnion(\n    sdSphere(origin - vec3<f32>(size * (0.6 * t * -1), size * 0.2 * t * -1, 0), size),\n    sdSphere(origin - vec3<f32>(size * (0.6 * t), size * 0.2 * t, 0), size),\n    10\n  );\n}\n\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  if (distanceToScene(pos) > 0.01) {\n    return 0;\n  }\n  return 1 + abs(simplexNoise3(pos * 0.01)) * 254;\n}\n","fn distanceToScene(pos : vec3<f32>) -> f32 {\n  var origin : vec3<f32> = pos - volume.center;\n  var r : mat3x3<f32> = rotateX(PI * -0.5);\n  return opUnion(\n    sdTorus(\n      r * origin,\n      vec2<f32>(volume.size.x * 0.3, volume.size.x * 0.1)\n    ),\n    sdTorus(\n      r * rotateY(time) * origin,\n      vec2<f32>(volume.size.x * 0.1, volume.size.x * (0.02 + sin(time * 10) * 0.01))\n    )\n  );\n}\n\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  if (distanceToScene(pos) > 0.01) {\n    return 0;\n  }\n  return 1 + abs(simplexNoise3(pos * 0.01)) * 254;\n}\n","fn getValueAt(pos : vec3<f32>) -> f32 {\n  var p : vec3<f32> = pos + vec3<f32>(0, 0, round(time * 100));\n  var h : f32 = abs(simplexNoise3(p * 0.01)) * volume.size.y;\n  if (pos.y > h) {\n    return 0;\n  }\n  return 1 + abs(simplexNoise3(p * -0.001)) * 254;\n}\n","fn distanceToScene(pos : vec3<f32>) -> f32 {\n  if (sdSphere(pos - volume.center, volume.size.x * 0.35) > 0.01) {\n    return 1;\n  }\n  var id : f32 = noise3(floor(pos / 32));\n  var p : vec3<f32> = (pos % 32) - 16;\n  var t : f32 = sin((time + id) * 4);\n  var d : f32;\n  if (floor(id * 10) % 2 == 0) {\n    d = sdSphere(p, t * 4 + 8);\n  } else {\n    d = sdBox(p, vec3<f32>(t * 4 + 8));\n  }\n  return opSmoothSubstraction(\n    opSmoothSubstraction(\n      d,\n      sdBox(p, vec3<f32>(4, 4, 12)),\n      1\n    ),\n    sdBox(p, vec3<f32>(12, 4, 4)),\n    1\n  );\n}\n\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  if (distanceToScene(pos) > 0.01) {\n    return 0;\n  }\n  return 1 + abs(simplexNoise3(floor(pos / 32))) * 254;\n}\n"],se={background:re("#000000"),effects:{edges:{color:re("#000000"),intensity:re(.3)}},gpu:null,resolution:re(300)},ae={errors:re([]),source:re(ie[0])},ce=re("scene"),{window:ue}=H,le=e=>({}),fe=e=>({}),pe=e=>({}),de=e=>({});function ve(e){let n,t,o,i,s,c,p,m;const x=e[5].ui,b=a(x,e,e[4],de),$=e[5].viewport,k=a($,e,e[4],fe);return{c(){n=g("div"),t=g("div"),b&&b.c(),o=y(),i=g("div"),s=y(),k&&k.c(),z(t,"class","ui svelte-vm4s43"),z(i,"class","divider svelte-vm4s43"),z(n,"class","layout svelte-vm4s43"),E(n,"--uiWidth",e[0]+"px")},m(r,a){v(r,n,a),d(n,t),b&&b.m(t,null),d(n,o),d(n,i),d(n,s),k&&k.m(n,null),c=!0,p||(m=[w(ue,"mousemove",e[1]),w(ue,"mouseup",e[2]),w(i,"mousedown",e[3])],p=!0)},p(e,[t]){b&&b.p&&(!c||16&t)&&l(b,x,e,e[4],c?u(x,e[4],t,pe):f(e[4]),de),k&&k.p&&(!c||16&t)&&l(k,$,e,e[4],c?u($,e[4],t,le):f(e[4]),fe),(!c||1&t)&&E(n,"--uiWidth",e[0]+"px")},i(e){c||(X(b,e),X(k,e),c=!0)},o(e){Z(b,e),Z(k,e),c=!1},d(e){e&&h(n),b&&b.d(e),k&&k.d(e),p=!1,r(m)}}}function he(e,n,t){let{$$slots:r={},$$scope:o}=n;const i={enabled:!1,initial:0,offset:0};let s=800;const a=({clientX:e})=>{i.enabled&&(t(0,s=Math.max(Math.floor(i.initial+e-i.offset),400)),V().then((()=>window.dispatchEvent(new Event("resize")))))};return e.$$set=e=>{"$$scope"in e&&t(4,o=e.$$scope)},[s,a,()=>{i.enabled&&(i.enabled=!1)},e=>{i.enabled=!0,i.initial=s,i.offset=e.clientX,a(e)},o,r]}class me extends ne{constructor(e){super(),ee(this,e,he,ve,i,{})}}function ge(e,n,t){const r=e.slice();return r[11]=n[t],r}function xe(e,n,t){const r=e.slice();return r[14]=n[t],r}function ye(e){let n,t,r=e[14]+"";return{c(){n=g("div"),t=x(r)},m(e,r){v(e,n,r),d(n,t)},p(e,n){4&n&&r!==(r=e[14]+"")&&k(t,r)},d(e){e&&h(n)}}}function be(e){let n,t,r=e[11],o=[];for(let n=0;n<r.length;n+=1)o[n]=ye(xe(e,r,n));return{c(){n=g("div");for(let e=0;e<o.length;e+=1)o[e].c();t=y(),z(n,"class","svelte-18qv7ao")},m(e,r){v(e,n,r);for(let e=0;e<o.length;e+=1)o[e].m(n,null);d(n,t)},p(e,i){if(4&i){let s;for(r=e[11],s=0;s<r.length;s+=1){const a=xe(e,r,s);o[s]?o[s].p(a,i):(o[s]=ye(a),o[s].c(),o[s].m(n,t))}for(;s<o.length;s+=1)o[s].d(1);o.length=r.length}},d(e){e&&h(n),m(o,e)}}}function we(n){let t,r,o,i,s,a,c,u,l,f,p,b,$,S=n[2].length+"",E=n[2],_=[];for(let e=0;e<E.length;e+=1)_[e]=be(ge(n,E,e));return{c(){t=g("div"),r=g("div"),o=y(),i=g("div"),s=g("div"),a=g("div"),c=y(),u=x(S),l=x(" errors"),f=y(),p=g("div");for(let e=0;e<_.length;e+=1)_[e].c();z(r,"class","wrapper svelte-18qv7ao"),z(a,"class","status svelte-18qv7ao"),T(a,"error",n[2].length),z(s,"class","toggle svelte-18qv7ao"),z(p,"class","messages svelte-18qv7ao"),z(i,"class","errors svelte-18qv7ao"),T(i,"open",n[1]),z(t,"class","editor svelte-18qv7ao")},m(e,h){v(e,t,h),d(t,r),n[7](r),d(t,o),d(t,i),d(i,s),d(s,a),d(s,c),d(s,u),d(s,l),d(i,f),d(i,p);for(let e=0;e<_.length;e+=1)_[e].m(p,null);b||($=w(s,"click",n[5]),b=!0)},p(e,[n]){if(4&n&&T(a,"error",e[2].length),4&n&&S!==(S=e[2].length+"")&&k(u,S),4&n){let t;for(E=e[2],t=0;t<E.length;t+=1){const r=ge(e,E,t);_[t]?_[t].p(r,n):(_[t]=be(r),_[t].c(),_[t].m(p,null))}for(;t<_.length;t+=1)_[t].d(1);_.length=E.length}2&n&&T(i,"open",e[1])},i:e,o:e,d(e){e&&h(t),n[7](null),m(_,e),b=!1,$()}}}function ze(e,n,t){let r,o,{state:i}=n;const{errors:a,source:c}=i;let u,l;s(e,a,(e=>t(2,o=e))),s(e,c,(e=>t(9,r=e)));let f=!1;const p=()=>l.layout();return P((()=>{let e,n=!0,o=!1;l=monaco.editor.create(u,{value:r,language:"c",minimap:{enabled:!1},theme:"vs-dark"}),l.onDidChangeModelContent((()=>{e&&clearTimeout(e),e=setTimeout((()=>{o=!0,c.set(l.getValue()),o=!1}),300)})),window.addEventListener("resize",p,!1);const i=[a.subscribe((e=>{!n&&e.length&&(t(1,f=!0),V().then(p))})),c.subscribe((e=>{n||o||l.setValue(e)}))];return n=!1,()=>{clearTimeout(e),l.dispose(),window.removeEventListener("resize",p),i.forEach((e=>e()))}})),e.$$set=e=>{"state"in e&&t(6,i=e.state)},[u,f,o,a,c,()=>{t(1,f=!f),V().then(p)},i,function(e){B[e?"unshift":"push"]((()=>{u=e,t(0,u)}))}]}class $e extends ne{constructor(e){super(),ee(this,e,ze,we,i,{state:6})}}function ke(n){let t,r;return t=new $e({props:{state:oe}}),{c(){K(t.$$.fragment)},m(e,n){J(t,e,n),r=!0},p:e,i(e){r||(X(t.$$.fragment,e),r=!0)},o(e){Z(t.$$.fragment,e),r=!1},d(e){Q(t,e)}}}class Se extends ne{constructor(e){super(),ee(this,e,null,ke,i,{})}}function Ee(e,n,t){const r=e.slice();return r[13]=n[t],r}function Te(e){let n,t,r,o,i,s=e[13]+"";return{c(){n=g("div"),t=x(s),r=g("span"),r.textContent="3",z(r,"class","svelte-n9gwxf"),z(n,"class","svelte-n9gwxf"),T(n,"enabled",e[13]===e[0])},m(s,a){v(s,n,a),d(n,t),d(n,r),o||(i=w(n,"click",e[9](e[13])),o=!0)},p(t,r){e=t,257&r&&T(n,"enabled",e[13]===e[0])},d(e){e&&h(n),o=!1,i()}}}function _e(n){let t,o,i,s,a,c,u,l,f,p,x,b,k,E,T,_,M,P,A,B,C,U,R,I,L,V,G=n[8],N=[];for(let e=0;e<G.length;e+=1)N[e]=Te(Ee(n,G,e));return{c(){t=g("div"),o=g("div"),i=g("label"),i.textContent="Background:",s=y(),a=g("input"),c=y(),u=g("div"),l=g("label"),l.textContent="Resolution:",f=y(),p=g("div");for(let e=0;e<N.length;e+=1)N[e].c();x=y(),b=g("h4"),b.textContent="Effects",k=y(),E=g("h5"),E.textContent="Edges",T=y(),_=g("div"),M=g("label"),M.textContent="Color:",P=y(),A=g("input"),B=y(),C=g("div"),U=g("label"),U.textContent="Intensity:",R=y(),I=g("input"),z(i,"for","background"),z(i,"class","svelte-n9gwxf"),z(a,"id","background"),z(a,"type","color"),z(a,"class","svelte-n9gwxf"),z(o,"class","input svelte-n9gwxf"),z(l,"for","resolution"),z(l,"class","svelte-n9gwxf"),z(p,"class","resolution svelte-n9gwxf"),z(u,"class","input svelte-n9gwxf"),z(b,"class","svelte-n9gwxf"),z(E,"class","svelte-n9gwxf"),z(M,"for","edgesColor"),z(M,"class","svelte-n9gwxf"),z(A,"id","edgesColor"),z(A,"type","color"),z(A,"class","svelte-n9gwxf"),z(_,"class","input svelte-n9gwxf"),z(U,"for","edgesIntensity"),z(U,"class","svelte-n9gwxf"),z(I,"id","edgesIntensity"),z(I,"type","number"),z(I,"min",0),z(I,"max",1),z(I,"step",.01),z(I,"class","svelte-n9gwxf"),z(C,"class","input svelte-n9gwxf"),z(t,"class","wrapper svelte-n9gwxf")},m(e,r){v(e,t,r),d(t,o),d(o,i),d(o,s),d(o,a),S(a,n[1]),d(t,c),d(t,u),d(u,l),d(u,f),d(u,p);for(let e=0;e<N.length;e+=1)N[e].m(p,null);d(t,x),d(t,b),d(t,k),d(t,E),d(t,T),d(t,_),d(_,M),d(_,P),d(_,A),S(A,n[2]),d(t,B),d(t,C),d(C,U),d(C,R),d(C,I),S(I,n[3]),L||(V=[w(a,"input",n[10]),w(A,"input",n[11]),w(I,"input",n[12])],L=!0)},p(e,[n]){if(2&n&&S(a,e[1]),769&n){let t;for(G=e[8],t=0;t<G.length;t+=1){const r=Ee(e,G,t);N[t]?N[t].p(r,n):(N[t]=Te(r),N[t].c(),N[t].m(p,null))}for(;t<N.length;t+=1)N[t].d(1);N.length=G.length}4&n&&S(A,e[2]),8&n&&$(I.value)!==e[3]&&S(I,e[3])},i:e,o:e,d(e){e&&h(t),m(N,e),L=!1,r(V)}}}function Me(e,n,t){let r,o,i,a;const{background:c,effects:{edges:{color:u,intensity:l}},resolution:f}=se;s(e,c,(e=>t(1,o=e))),s(e,u,(e=>t(2,i=e))),s(e,l,(e=>t(3,a=e))),s(e,f,(e=>t(0,r=e)));return[r,o,i,a,c,u,l,f,[100,200,300,400],e=>()=>{p(f,r=e,r)},function(){o=this.value,c.set(o)},function(){i=this.value,u.set(i)},function(){a=$(this.value),l.set(a)}]}class Pe extends ne{constructor(e){super(),ee(this,e,Me,_e,i,{})}}function Ae(n){let t,r;return t=new $e({props:{state:ae}}),{c(){K(t.$$.fragment)},m(e,n){J(t,e,n),r=!0},p:e,i(e){r||(X(t.$$.fragment,e),r=!0)},o(e){Z(t.$$.fragment,e),r=!1},d(e){Q(t,e)}}}class Be extends ne{constructor(e){super(),ee(this,e,null,Ae,i,{})}}const Ce=e=>({}),Ue=e=>({}),Re=e=>({}),Ie=e=>({});function Le(e){let n,t,r,o;const i=e[1].toggle,s=a(i,e,e[0],Ie),c=e[1].options,p=a(c,e,e[0],Ue);return{c(){n=g("div"),s&&s.c(),t=y(),r=g("div"),p&&p.c(),z(r,"class","options svelte-stktq6"),z(n,"class","dropdown svelte-stktq6")},m(e,i){v(e,n,i),s&&s.m(n,null),d(n,t),d(n,r),p&&p.m(r,null),o=!0},p(e,[n]){s&&s.p&&(!o||1&n)&&l(s,i,e,e[0],o?u(i,e[0],n,Re):f(e[0]),Ie),p&&p.p&&(!o||1&n)&&l(p,c,e,e[0],o?u(c,e[0],n,Ce):f(e[0]),Ue)},i(e){o||(X(s,e),X(p,e),o=!0)},o(e){Z(s,e),Z(p,e),o=!1},d(e){e&&h(n),s&&s.d(e),p&&p.d(e)}}}function Ve(e,n,t){let{$$slots:r={},$$scope:o}=n;return e.$$set=e=>{"$$scope"in e&&t(0,o=e.$$scope)},[o,r]}class Ge extends ne{constructor(e){super(),ee(this,e,Ve,Le,i,{})}}function Ne(e,n,t){const r=e.slice();return r[4]=n[t],r[6]=t,r}function qe(e,n,t){const r=e.slice();return r[7]=n[t].id,r[8]=n[t].name,r}function Fe(e){let n,t,r,o,i,s=e[8]+"";return{c(){n=g("div"),t=x(s),r=y(),z(n,"class","tool svelte-1i37ih6"),T(n,"enabled",e[0]===e[7])},m(s,a){v(s,n,a),d(n,t),d(n,r),o||(i=w(n,"click",e[2](e[7])),o=!0)},p(t,r){e=t,3&r&&T(n,"enabled",e[0]===e[7])},d(e){e&&h(n),o=!1,i()}}}function De(e){let n,t;return n=new Ge({props:{$$slots:{options:[je],toggle:[Oe]},$$scope:{ctx:e}}}),{c(){K(n.$$.fragment)},m(e,r){J(n,e,r),t=!0},p(e,t){const r={};2048&t&&(r.$$scope={dirty:t,ctx:e}),n.$set(r)},i(e){t||(X(n.$$.fragment,e),t=!0)},o(e){Z(n.$$.fragment,e),t=!1},d(e){Q(n,e)}}}function Oe(n){let t;return{c(){t=g("div"),t.textContent="Load Example",z(t,"class","toggle svelte-1i37ih6"),z(t,"slot","toggle")},m(e,n){v(e,t,n)},p:e,d(e){e&&h(t)}}}function Ye(e){let n,t,r,o,i,s=e[6]+1+"";return{c(){n=g("div"),t=x("Example "),r=x(s),z(n,"class","action svelte-1i37ih6")},m(s,a){v(s,n,a),d(n,t),d(n,r),o||(i=w(n,"click",e[3](e[4])),o=!0)},p(n,t){e=n},d(e){e&&h(n),o=!1,i()}}}function je(e){let n,t=ie,r=[];for(let n=0;n<t.length;n+=1)r[n]=Ye(Ne(e,t,n));return{c(){for(let e=0;e<r.length;e+=1)r[e].c();n=b()},m(e,t){for(let n=0;n<r.length;n+=1)r[n].m(e,t);v(e,n,t)},p(e,o){if(8&o){let i;for(t=ie,i=0;i<t.length;i+=1){const s=Ne(e,t,i);r[i]?r[i].p(s,o):(r[i]=Ye(s),r[i].c(),r[i].m(n.parentNode,n))}for(;i<r.length;i+=1)r[i].d(1);r.length=t.length}},d(e){m(r,e),e&&h(n)}}}function We(e){let n,t,r,o,i,s=e[1],a=[];for(let n=0;n<s.length;n+=1)a[n]=Fe(qe(e,s,n));let c="scene"===e[0]&&De(e);return{c(){n=g("div"),t=g("div");for(let e=0;e<a.length;e+=1)a[e].c();r=y(),o=g("div"),c&&c.c(),z(t,"class","tools svelte-1i37ih6"),z(o,"class","actions svelte-1i37ih6"),z(n,"class","toolbar svelte-1i37ih6")},m(e,s){v(e,n,s),d(n,t);for(let e=0;e<a.length;e+=1)a[e].m(t,null);d(n,r),d(n,o),c&&c.m(o,null),i=!0},p(e,[n]){if(7&n){let r;for(s=e[1],r=0;r<s.length;r+=1){const o=qe(e,s,r);a[r]?a[r].p(o,n):(a[r]=Fe(o),a[r].c(),a[r].m(t,null))}for(;r<a.length;r+=1)a[r].d(1);a.length=s.length}"scene"===e[0]?c?(c.p(e,n),1&n&&X(c,1)):(c=De(e),c.c(),X(c,1),c.m(o,null)):c&&(j(),Z(c,1,1,(()=>{c=null})),W())},i(e){i||(X(c),i=!0)},o(e){Z(c),i=!1},d(e){e&&h(n),m(a,e),c&&c.d()}}}function Xe(e,n,t){let r;s(e,ce,(e=>t(0,r=e)));return[r,[{id:"scene",name:"Scene"},{id:"atlas",name:"Atlas"},{id:"rendering",name:"Rendering"}],e=>()=>{p(ce,r=e,r)},e=>()=>ae.source.set(e)]}class Ze extends ne{constructor(e){super(),ee(this,e,Xe,We,i,{})}}var He=1e-6,Ke="undefined"!=typeof Float32Array?Float32Array:Array,Je=Math.PI/180;function Qe(){var e=new Ke(16);return Ke!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function en(e,n,t,r){var o=n[0],i=n[1],s=n[2],a=n[3],c=o+o,u=i+i,l=s+s,f=o*c,p=o*u,d=o*l,v=i*u,h=i*l,m=s*l,g=a*c,x=a*u,y=a*l,b=r[0],w=r[1],z=r[2];return e[0]=(1-(v+m))*b,e[1]=(p+y)*b,e[2]=(d-x)*b,e[3]=0,e[4]=(p-y)*w,e[5]=(1-(f+m))*w,e[6]=(h+g)*w,e[7]=0,e[8]=(d+x)*z,e[9]=(h-g)*z,e[10]=(1-(f+v))*z,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}Math.hypot||(Math.hypot=function(){for(var e=0,n=arguments.length;n--;)e+=arguments[n]*arguments[n];return Math.sqrt(e)});var nn=function(e,n,t,r,o){var i,s=1/Math.tan(n/2);return e[0]=s/t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e};function tn(){var e=new Ke(3);return Ke!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function rn(e,n,t,r){return e[0]=n,e[1]=t,e[2]=r,e}function on(){var e=new Ke(2);return Ke!=Float32Array&&(e[0]=0,e[1]=0),e}function sn(e,n){var t=new Ke(2);return t[0]=e,t[1]=n,t}function an(e,n,t){return e[0]=n,e[1]=t,e}tn(),function(){var e=on()}();var cn="fn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfn noise3(p: vec3<f32>) -> f32 {\n  let a = floor(p);\n  var d: vec3<f32> = p - a;\n  d = d * d * (3. - 2. * d);\n\n  let b = a.xxyy + vec4<f32>(0., 1., 0., 1.);\n  let k1 = permute4(b.xyxy);\n  let k2 = permute4(k1.xyxy + b.zzww);\n\n  let c = k2 + a.zzzz;\n  let k3 = permute4(c);\n  let k4 = permute4(c + 1.);\n\n  let o1 = fract(k3 * (1. / 41.));\n  let o2 = fract(k4 * (1. / 41.));\n\n  let o3 = o2 * d.z + o1 * (1. - d.z);\n  let o4 = o3.yw * d.x + o3.xz * (1. - d.x);\n\n  return o4.y * d.y + o4.x * (1. - d.y);\n}\n\nfn simplexNoise3(v: vec3<f32>) -> f32 {\n  let C = vec2<f32>(1. / 6., 1. / 3.);\n  let D = vec4<f32>(0., 0.5, 1., 2.);\n\n  var i: vec3<f32>  = floor(v + dot(v, C.yyy));\n  let x0 = v - i + dot(i, C.xxx);\n\n  let g = step(x0.yzx, x0.xyz);\n  let l = 1.0 - g;\n  let i1 = min(g.xyz, l.zxy);\n  let i2 = max(g.xyz, l.zxy);\n\n  let x1 = x0 - i1 + 1. * C.xxx;\n  let x2 = x0 - i2 + 2. * C.xxx;\n  let x3 = x0 - 1. + 3. * C.xxx;\n\n  i = i % vec3<f32>(289.);\n  let p = permute4(permute4(permute4(\n      i.z + vec4<f32>(0., i1.z, i2.z, 1. )) +\n      i.y + vec4<f32>(0., i1.y, i2.y, 1. )) +\n      i.x + vec4<f32>(0., i1.x, i2.x, 1. ));\n\n  var n_: f32 = 1. / 7.;\n  let ns = n_ * D.wyz - D.xzx;\n\n  let j = p - 49. * floor(p * ns.z * ns.z);\n\n  let x_ = floor(j * ns.z);\n  let y_ = floor(j - 7.0 * x_);\n\n  let x = x_ *ns.x + ns.yyyy;\n  let y = y_ *ns.x + ns.yyyy;\n  let h = 1.0 - abs(x) - abs(y);\n\n  let b0 = vec4<f32>( x.xy, y.xy );\n  let b1 = vec4<f32>( x.zw, y.zw );\n\n  let s0 = floor(b0)*2.0 + 1.0;\n  let s1 = floor(b1)*2.0 + 1.0;\n  let sh = -step(h, vec4<f32>(0.));\n\n  let a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  let a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  var p0: vec3<f32> = vec3<f32>(a0.xy, h.x);\n  var p1: vec3<f32> = vec3<f32>(a0.zw, h.y);\n  var p2: vec3<f32> = vec3<f32>(a1.xy, h.z);\n  var p3: vec3<f32> = vec3<f32>(a1.zw, h.w);\n\n  let norm = taylorInvSqrt4(vec4<f32>(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n  p0 = p0 * norm.x;\n  p1 = p1 * norm.y;\n  p2 = p2 * norm.z;\n  p3 = p3 * norm.w;\n\n  var m: vec4<f32> = 0.6 - vec4<f32>(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n  m = max(m, vec4<f32>(0.));\n  m = m * m;\n  return 42. * dot(m * m, vec4<f32>(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n";class un{constructor({device:e,count:n=254,width:t=16,height:r=16}){this.device=e,this.count=n,this.width=t,this.height=r,this.texture=e.createTexture({dimension:"2d",size:[t,r,n],format:"rgba8unorm",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})}compute(e="\nfn getColorAt(texture : i32, pixel : vec2<i32>) -> vec4<f32> {\n  var h : f32 = f32(texture) / f32(atlas.count);\n  var s : f32 = 0.5;\n  var l : f32 = 0.5;\n  if (pixel.x == 0 || pixel.y == 0 || pixel.x == (atlas.width - 1) || pixel.y == (atlas.height - 1)) {\n    l = min(l * 1.1, 1);\n  }\n  return hsl2Rgba(h, s, l);\n}\n"){if(this.generator===e)return;this.generator=e;const{device:n,count:t,width:r,height:o,texture:i}=this;this.code=(({count:e,width:n,height:t,generator:r})=>`\n@group(0) @binding(0) var texture : texture_storage_2d_array<rgba8unorm, write>;\n\n${cn}\n\nstruct Atlas {\n  count : i32,\n  width : i32,\n  height : i32,\n  stride : i32,\n  length : i32,\n}\n\nconst atlas : Atlas = Atlas(\n  ${e},\n  ${n},\n  ${t},\n  ${n*t},\n  ${e*n*t},\n);\n\nfn hue2Rgb(p : f32, q : f32, t : f32) -> f32 {\n  var h : f32 = t;\n  if (h < 0) { h += 1; }\n  if (h > 1) { h -= 1; }\n  if (h < 1 / 6.0) { return p + (q - p) * 6 * h; }\n  if (h < 1 / 2.0) { return q; }\n  if (h < 2 / 3.0) { return p + (q - p) * (2.0 / 3.0 - h) * 6; }\n  return p;\n}\n\nfn hsl2Rgba(h : f32, s: f32, l: f32) -> vec4<f32> {\n  var rgba : vec4<f32> = vec4<f32>(0, 0, 0, 1);\n  if (s == 0) {\n    rgba.r = l;\n    rgba.g = l;\n    rgba.b = l;\n  } else {\n    var q : f32;\n    if (l < 0.5) {\n      q = l * (1 + s);\n    } else {\n      q = l + s - l * s;\n    }\n    var p : f32 = 2 * l - q;\n    rgba.r = hue2Rgb(p, q, h + 1 / 3.0);\n    rgba.g = hue2Rgb(p, q, h);\n    rgba.b = hue2Rgb(p, q, h - 1 / 3.0);\n  }\n  return rgba;\n};\n\n${r}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : i32 = i32(GlobalInvocationID.x);\n  if (id >= atlas.length) {\n    return;\n  }\n  var tex : i32 = id / atlas.stride;\n  var index : i32 = id - tex * atlas.stride;\n  var y : i32 = index / atlas.width;\n  var pixel : vec2<i32> = vec2<i32>(index - y * atlas.width, y);\n  textureStore(texture, pixel, tex, getColorAt(tex, pixel));\n}\n`)({count:t,width:r,height:o,generator:e}),this.shader=n.createShaderModule({code:this.code});const s=n.createComputePipeline({layout:"auto",compute:{module:this.shader,entryPoint:"main"}}),a=n.createCommandEncoder(),c=a.beginComputePass();c.setPipeline(s),c.setBindGroup(0,n.createBindGroup({layout:s.getBindGroupLayout(0),entries:[{binding:0,resource:i.createView()}]})),c.dispatchWorkgroups(Math.ceil(t*r*o/64)),c.end(),n.queue.submit([a.finish()])}}const ln=Qe(),fn=tn(),pn=function(e,n,t){var r=new Ke(3);return r[0]=e,r[1]=n,r[2]=t,r}(0,1,0);class dn{constructor({device:e,aspect:n=1,fov:t=75,near:r=.1,far:o=1e3}){this.device=e,this.buffer=e.createBuffer({size:41*Float32Array.BYTES_PER_ELEMENT+12,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),this.aspect=n,this.fov=t,this.near=r,this.far=o,this.position=tn(),this.target=tn(),this.projectionMatrix=Qe(),this.viewBuffer=new Float32Array(25),this.viewMatrix=this.viewBuffer.subarray(0,16),this.normalMatrix=this.viewBuffer.subarray(16,25)}setOrbit(e,n,t){const{position:r,target:o}=this,i=Math.sin(e)*t;(function(e,n,t){e[0]=n[0]+t[0],e[1]=n[1]+t[1],e[2]=n[2]+t[2]})(r,o,rn(fn,i*Math.sin(n),Math.cos(e)*t,i*Math.cos(n))),this.updateView()}updateProjection(){const{device:e,buffer:n,projectionMatrix:t,aspect:r,fov:o,near:i,far:s}=this;nn(t,function(e){return e*Je}(o),r,i,s),e.queue.writeBuffer(n,0,t)}updateView(){const{device:e,buffer:n,viewBuffer:t,viewMatrix:r,normalMatrix:o,position:i,target:s}=this;var a,c,u,l,f,p,d,v,h,m,g,x,y,b,w,z,$,k,S,E,T,_,M;a=r,u=s,l=pn,w=(c=i)[0],z=c[1],$=c[2],k=l[0],S=l[1],E=l[2],T=u[0],_=u[1],M=u[2],Math.abs(w-T)<He&&Math.abs(z-_)<He&&Math.abs($-M)<He?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(a):(g=w-T,x=z-_,y=$-M,f=S*(y*=b=1/Math.hypot(g,x,y))-E*(x*=b),p=E*(g*=b)-k*y,d=k*x-S*g,(b=Math.hypot(f,p,d))?(f*=b=1/b,p*=b,d*=b):(f=0,p=0,d=0),v=x*d-y*p,h=y*f-g*d,m=g*p-x*f,(b=Math.hypot(v,h,m))?(v*=b=1/b,h*=b,m*=b):(v=0,h=0,m=0),a[0]=f,a[1]=v,a[2]=g,a[3]=0,a[4]=p,a[5]=h,a[6]=x,a[7]=0,a[8]=d,a[9]=m,a[10]=y,a[11]=0,a[12]=-(f*w+p*z+d*$),a[13]=-(v*w+h*z+m*$),a[14]=-(g*w+x*z+y*$),a[15]=1),function(e,n){var t=n[0],r=n[1],o=n[2],i=n[3],s=n[4],a=n[5],c=n[6],u=n[7],l=n[8],f=n[9],p=n[10],d=n[11],v=n[12],h=n[13],m=n[14],g=n[15],x=t*a-r*s,y=t*c-o*s,b=t*u-i*s,w=r*c-o*a,z=r*u-i*a,$=o*u-i*c,k=l*h-f*v,S=l*m-p*v,E=l*g-d*v,T=f*m-p*h,_=f*g-d*h,M=p*g-d*m,P=x*M-y*_+b*T+w*E-z*S+$*k;P&&(P=1/P,e[0]=(a*M-c*_+u*T)*P,e[1]=(c*E-s*M-u*S)*P,e[2]=(s*_-a*E+u*k)*P,e[3]=(o*_-r*M-i*T)*P,e[4]=(t*M-o*E+i*S)*P,e[5]=(r*E-t*_-i*k)*P,e[6]=(h*$-m*z+g*w)*P,e[7]=(m*b-v*$-g*y)*P,e[8]=(v*z-h*b+g*x)*P)}(o,function(e,n){var t=n[0],r=n[1],o=n[2],i=n[3],s=n[4],a=n[5],c=n[6],u=n[7],l=n[8],f=n[9],p=n[10],d=n[11],v=n[12],h=n[13],m=n[14],g=n[15],x=t*a-r*s,y=t*c-o*s,b=t*u-i*s,w=r*c-o*a,z=r*u-i*a,$=o*u-i*c,k=l*h-f*v,S=l*m-p*v,E=l*g-d*v,T=f*m-p*h,_=f*g-d*h,M=p*g-d*m,P=x*M-y*_+b*T+w*E-z*S+$*k;return P?(P=1/P,e[0]=(a*M-c*_+u*T)*P,e[1]=(o*_-r*M-i*T)*P,e[2]=(h*$-m*z+g*w)*P,e[3]=(p*z-f*$-d*w)*P,e[4]=(c*E-s*M-u*S)*P,e[5]=(t*M-o*E+i*S)*P,e[6]=(m*b-v*$-g*y)*P,e[7]=(l*$-p*b+d*y)*P,e[8]=(s*_-a*E+u*k)*P,e[9]=(r*E-t*_-i*k)*P,e[10]=(v*z-h*b+g*x)*P,e[11]=(f*b-l*z-d*x)*P,e[12]=(a*S-s*T-c*k)*P,e[13]=(t*T-r*S+o*k)*P,e[14]=(h*y-v*w-m*x)*P,e[15]=(l*w-f*y+p*x)*P,e):null}(ln,r)),e.queue.writeBuffer(n,64,t)}}var vn="const PI : f32 = 3.141592653589793;\n\nfn rotateX(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    1, 0, 0,\n    0, c, s,\n    0, -s, c,\n  );\n}\n\nfn rotateY(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, 0, -s,\n    0, 1, 0,\n    s, 0, c,\n  );\n}\n\nfn rotateZ(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, s, 0,\n    -s, c, 0,\n    0, 0, 1,\n  );\n}\n";class hn{constructor({device:e,format:n}){this.device=e,this.descriptor={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},this.effects=(e=>{const n=new Float32Array([0,0,0,.3,.5,.5]),t=e.createBuffer({size:32,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,mappedAtCreation:!0});return new Float32Array(t.getMappedRange()).set(n),t.unmap(),{buffer:t,edges:{get color(){return n.subarray(0,3)},set color(r){n.set(r),e.queue.writeBuffer(t,0,n,0,3)},get intensity(){return n[3]},set intensity(r){n[3]=r,e.queue.writeBuffer(t,12,n,3,1)},get depthScale(){return n[4]},set depthScale(r){n[4]=r,e.queue.writeBuffer(t,16,n,4,1)},get normalScale(){return n[5]},set normalScale(r){n[5]=r,e.queue.writeBuffer(t,20,n,5,1)}}}})(e),this.geometry=(e=>{const n=e.createBuffer({size:18*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set([-1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1]),n.unmap(),n})(e),this.pipeline=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({code:"\n@vertex\nfn main(@location(0) position : vec4<f32>) -> @builtin(position) vec4<f32> {\n  return position;\n}\n"}),entryPoint:"main",buffers:[{arrayStride:3*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]}]},fragment:{module:e.createShaderModule({code:"\nstruct Edges {\n  color : vec3<f32>,\n  intensity : f32,\n  depthScale : f32,\n  normalScale : f32,\n}\n\nstruct Effects {\n  edges : Edges,\n}\n\n@group(0) @binding(0) var<uniform> effects : Effects;\n@group(0) @binding(1) var colorTexture : texture_2d<f32>;\n@group(0) @binding(2) var normalTexture : texture_2d<f32>;\n@group(0) @binding(3) var positionTexture : texture_2d<f32>;\n\nconst offset : vec3<i32> = vec3<i32>(1, 1, 0);\n\nfn edgesDepth(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : f32 = textureLoad(positionTexture, pixel, 0).z;\n  var pixelLeft : f32 = textureLoad(positionTexture, pixel - offset.xz, 0).z;\n  var pixelRight : f32 = textureLoad(positionTexture, pixel + offset.xz, 0).z;\n  var pixelUp : f32 = textureLoad(positionTexture, pixel + offset.zy, 0).z;\n  var pixelDown : f32 = textureLoad(positionTexture, pixel - offset.zy, 0).z;\n  return (\n    abs(pixelLeft    - pixelCenter) \n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter) \n  ) * effects.edges.depthScale;\n}\n\nfn edgesNormal(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : vec3<f32> = textureLoad(normalTexture, pixel, 0).xyz;\n  var pixelLeft : vec3<f32> = textureLoad(normalTexture, pixel - offset.xz, 0).xyz;\n  var pixelRight : vec3<f32> = textureLoad(normalTexture, pixel + offset.xz, 0).xyz;\n  var pixelUp : vec3<f32> = textureLoad(normalTexture, pixel + offset.zy, 0).xyz;\n  var pixelDown : vec3<f32> = textureLoad(normalTexture, pixel - offset.zy, 0).xyz;\n  var edge : vec3<f32> = (\n    abs(pixelLeft    - pixelCenter)\n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter)\n  );\n  return (edge.x + edge.y + edge.z) * effects.edges.normalScale;\n}\n\n@fragment\nfn main(@builtin(position) uv : vec4<f32>) -> @location(0) vec4<f32> {\n  var pixel : vec2<i32> = vec2<i32>(floor(uv.xy));\n  var color : vec3<f32> = textureLoad(colorTexture, pixel, 0).xyz;\n  if (effects.edges.intensity != 0) {\n    color = mix(color, effects.edges.color, clamp(max(edgesDepth(pixel), edgesNormal(pixel)), 0, 1) * effects.edges.intensity);\n  }\n  return vec4<f32>(color, 1);\n}\n"}),entryPoint:"main",targets:[{format:n}]},primitive:{topology:"triangle-list"}})}bindTextures({color:e,normal:n,position:t}){const{device:r,effects:o,pipeline:i}=this;this.bindings=r.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:o.buffer}},{binding:1,resource:e},{binding:2,resource:n},{binding:3,resource:t}]})}render(e,n){const{bindings:t,descriptor:r,geometry:o,pipeline:i}=this;r.colorAttachments[0].view=n;const s=e.beginRenderPass(r);s.setPipeline(i),s.setBindGroup(0,t),s.setVertexBuffer(0,o),s.draw(6,1,0,0),s.end()}}const mn=`\nstruct VertexInput {\n  @location(0) position : vec3<f32>,\n  @location(1) uv : vec2<f32>,\n  @location(2) face : vec4<f32>,\n}\n\nstruct VertexOutput {\n  @builtin(position) position : vec4<f32>,\n  @location(0) viewPosition: vec3<f32>,\n  @location(1) normal: vec3<f32>,\n  @location(2) uv: vec2<f32>,\n  @location(3) @interpolate(flat) texture: i32,\n}\n\nstruct Camera {\n  projection : mat4x4<f32>,\n  view : mat4x4<f32>,\n  normal : mat3x3<f32>,\n}\n\n@group(0) @binding(0) var<uniform> camera : Camera;\n\n${vn}\n\nconst faceNormal : vec3<f32> = vec3<f32>(0, 0, 1);\n\n@vertex\nfn main(voxel : VertexInput) -> VertexOutput {\n  var rotation : mat3x3<f32>;\n  switch (i32(voxel.face.w % 6)) {\n    default {\n      rotation = mat3x3<f32>(\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n      );\n    }\n    case 1 {\n      rotation = rotateX(PI * -0.5);\n    }\n    case 2 {\n      rotation = rotateX(PI * 0.5);\n    }\n    case 3 {\n      rotation = rotateY(PI * -0.5);\n    }\n    case 4 {\n      rotation = rotateY(PI * 0.5);\n    }\n    case 5 {\n      rotation = rotateY(PI);\n    }\n  }\n  var mvPosition : vec4<f32> = camera.view * vec4<f32>(rotation * voxel.position + voxel.face.xyz, 1);\n  var out : VertexOutput;\n  out.position = camera.projection * mvPosition;\n  out.viewPosition = -mvPosition.xyz;\n  out.normal = normalize(camera.normal * rotation * faceNormal);\n  out.uv = voxel.uv;\n  out.texture = i32(floor(voxel.face.w / 6));\n  return out;\n}\n`,gn=e=>{const n=e.createBuffer({size:30*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set([-.5,-.5,.5,0,1,.5,-.5,.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,-.5,.5,0,1]),n.unmap(),n};class xn{constructor({adapter:e,device:n,atlas:t=null,camera:r=null,canvas:o=null,samples:i=4}){const s=navigator.gpu.getPreferredCanvasFormat(e);this.atlas=t||new un({device:n}),this.camera=r||new dn({device:n}),this.canvas=o||document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context=this.canvas.getContext("webgpu"),this.context.configure({alphaMode:"opaque",device:n,format:s}),this.device=n,this.samples=i;const a=n.createRenderPipeline({layout:"auto",vertex:{module:n.createShaderModule({code:mn}),entryPoint:"main",buffers:[{arrayStride:5*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:3*Float32Array.BYTES_PER_ELEMENT,format:"float32x2"}]},{arrayStride:4*Float32Array.BYTES_PER_ELEMENT,stepMode:"instance",attributes:[{shaderLocation:2,offset:0,format:"float32x4"}]}]},fragment:{module:n.createShaderModule({code:"\nstruct FragmentInput {\n  @location(0) position : vec3<f32>,\n  @location(1) normal : vec3<f32>,\n  @location(2) uv : vec2<f32>,\n  @location(3) @interpolate(flat) texture : i32,\n}\n\nstruct FragmentOutput {\n  @location(0) color : vec4<f32>,\n  @location(1) normal : vec4<f32>,\n  @location(2) position : vec4<f32>,\n}\n\n@group(0) @binding(1) var atlas : texture_2d_array<f32>;\n@group(0) @binding(2) var atlasSampler : sampler;\n\n@fragment\nfn main(face : FragmentInput) -> FragmentOutput {\n  var output : FragmentOutput;\n  output.color = textureSample(atlas, atlasSampler, face.uv, face.texture);\n  output.normal = vec4<f32>(normalize(face.normal), 1);\n  output.position = vec4<f32>(face.position, 1);\n  return output;\n}\n"}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"},multisample:{count:this.samples}});this.rendering={bindings:n.createBindGroup({layout:a.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.camera.buffer}},{binding:1,resource:this.atlas.texture.createView()},{binding:2,resource:n.createSampler()}]}),descriptor:{colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},geometry:gn(n),pipeline:a},this.postprocessing=new hn({device:n,format:s})}render(e,n){const{context:t,postprocessing:r,rendering:{bindings:o,descriptor:i,geometry:s,pipeline:a}}=this,c=e.beginRenderPass(i);c.setPipeline(a),c.setBindGroup(0,o),c.setVertexBuffer(0,s),n.chunks.forEach((({faces:e})=>{c.setVertexBuffer(1,e,16),c.drawIndirect(e,0)})),c.end(),r.render(e,t.getCurrentTexture().createView())}setClearColor(e,n,t){const{rendering:{descriptor:{colorAttachments:[{clearValue:r}]}}}=this;r.r=e,r.g=n,r.b=t}setSize(e,n){const{camera:t,canvas:r,device:o,postprocessing:i,rendering:s,samples:a}=this,c=window.devicePixelRatio||1,u=[Math.floor(e*c),Math.floor(n*c)];r.width=u[0],r.height=u[1],r.style.width=`${e}px`,r.style.height=`${n}px`,t.aspect=e/n,t.updateProjection();const l=(e,n,t,r)=>(e[n]&&e[n].destroy(),e[n]=o.createTexture({size:u,sampleCount:t,format:r,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),e[n].createView());s.descriptor.colorAttachments[0].view=l(s,"colorTexture",a,"rgba8unorm"),s.descriptor.colorAttachments[0].resolveTarget=l(s,"colorTarget",1,"rgba8unorm"),s.descriptor.colorAttachments[1].view=l(s,"normalTexture",a,"rgba16float"),s.descriptor.colorAttachments[1].resolveTarget=l(s,"normalTarget",1,"rgba16float"),s.descriptor.colorAttachments[2].view=l(s,"positionTexture",a,"rgba16float"),s.descriptor.colorAttachments[2].resolveTarget=l(s,"positionTarget",1,"rgba16float"),s.descriptor.depthStencilAttachment.view=l(s,"depthTexture",a,"depth24plus"),i.bindTextures({color:s.colorTarget.createView(),normal:s.normalTarget.createView(),position:s.positionTarget.createView()})}}var yn=({chunkSize:e})=>`\nconst chunkSize : i32 = ${e};\n\nfn getVoxel(pos : vec3<i32>) -> u32 {\n  return u32(pos.z * chunkSize * chunkSize + pos.y * chunkSize + pos.x);\n}\n`;const bn=({chunkSize:e})=>`\nstruct Faces {\n  vertexCount : u32,\n  instanceCount : atomic<u32>,\n  firstVertex : u32,\n  firstInstance : u32,\n  data : array<f32>,\n}\n\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<storage, read_write> faces : Faces;\n@group(0) @binding(2) var<storage, read> voxels : array<f32>;\n@group(0) @binding(3) var<storage, read> voxels_north : array<f32>;\n@group(0) @binding(4) var<storage, read> voxels_top : array<f32>;\n@group(0) @binding(5) var<storage, read> voxels_bottom : array<f32>;\n@group(0) @binding(6) var<storage, read> voxels_west : array<f32>;\n@group(0) @binding(7) var<storage, read> voxels_east : array<f32>;\n@group(0) @binding(8) var<storage, read> voxels_south : array<f32>;\n\n${yn({chunkSize:e})}\n\nfn isAir(pos : vec3<i32>) -> bool {\n  if (pos.x == -1) {\n    return voxels_west[getVoxel(vec3<i32>(chunkSize - 1, pos.y, pos.z))] == 0;\n  }\n  if (pos.x == chunkSize) {\n    return voxels_east[getVoxel(vec3<i32>(0, pos.y, pos.z))] == 0.0;\n  }\n  if (pos.y == -1) {\n    return voxels_bottom[getVoxel(vec3<i32>(pos.x, chunkSize - 1, pos.z))] == 0;\n  }\n  if (pos.y == chunkSize) {\n    return voxels_top[getVoxel(vec3<i32>(pos.x, 0, pos.z))] == 0;\n  }\n  if (pos.z == -1) {\n    return voxels_south[getVoxel(vec3<i32>(pos.x, pos.y, chunkSize - 1))] == 0;\n  }\n  if (pos.z == chunkSize) {\n    return voxels_north[getVoxel(vec3<i32>(pos.x, pos.y, 0))] == 0;\n  }\n  return voxels[getVoxel(pos)] == 0; \n}\n\nfn pushFace(pos : vec3<i32>, face : i32, texture : i32) {\n  var offset : u32 = atomicAdd(&(faces.instanceCount), 1) * 4;\n  faces.data[offset] = f32(pos.x) + 0.5;\n  faces.data[offset + 1] = f32(pos.y) + 0.5;\n  faces.data[offset + 2] = f32(pos.z) + 0.5;\n  faces.data[offset + 3] = f32(texture * 6 + face);\n}\n\nconst faceNormals = array<vec3<i32>, 6>(\n  vec3<i32>(0, 0, 1),\n  vec3<i32>(0, 1, 0),\n  vec3<i32>(0, -1, 0),\n  vec3<i32>(-1, 0, 0),\n  vec3<i32>(1, 0, 0),\n  vec3<i32>(0, 0, -1),\n);\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  var value : f32 = voxels[getVoxel(pos)];\n  if (value != 0) {\n    var texture : i32 = i32(floor(value) - 1);\n    for (var face : i32 = 0; face < 6; face++) {\n      var npos : vec3<i32> = pos + faceNormals[face];\n      if (isAir(npos)) {\n        pushFace(chunk + pos, face, texture);\n      }\n    }\n  }\n}\n`;class wn{constructor({chunks:e,volume:n}){this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:n.device.createShaderModule({code:bn({chunkSize:n.chunkSize})}),entryPoint:"main"}});const t={x:0,y:0,z:0},r=(r,o)=>{if(t.x=r.x+o.x,t.y=r.y+o.y,t.z=r.z+o.z,t.x<0||t.x>=e.x||t.y<0||t.y>=e.y||t.z<0||t.z>=e.z)return n.edge;const i=t.z*e.x*e.y+t.y*e.x+t.x;return n.chunks[i].voxels},o=[{x:0,y:0,z:1},{x:0,y:1,z:0},{x:0,y:-1,z:0},{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:0,z:-1}];this.bindings=n.chunks.map((e=>({bindings:n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e.position,e.faces,e.voxels,...o.map((n=>r(e.chunk,n)))].map(((e,n)=>({binding:n,resource:{buffer:e}})))}),chunk:e}))),this.workgroups=Math.ceil(n.chunkSize/4)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((({bindings:n,chunk:o})=>{o.resetInstanceCount(e);const i=e.beginComputePass();i.setPipeline(t),i.setBindGroup(0,n),i.dispatchWorkgroups(r,r,r),i.end()}))}}class zn{constructor({device:e,position:n=new Float32Array([0,0,0]),rotation:t=new Float32Array([0,0,0,1]),scale:r=new Float32Array([1,1,1])}){this.device=e,this.data=Qe(),this.buffer=e.createBuffer({mappedAtCreation:!0,size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),en(this.data,t,n,r),new Float32Array(this.buffer.getMappedRange()).set(this.data),this.buffer.unmap()}destroy(){const{buffer:e}=this;e.destroy()}set(e,n,t){const{device:r,buffer:o,data:i}=this;en(i,n,e,t),r.queue.writeBuffer(o,0,i)}}class $n{constructor({geometry:e,volume:n}){const t=e.indices.length/3;this.code=(({chunkSize:e,source:n,triangles:t})=>`\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<uniform> transform : mat4x4<f32>;\n@group(0) @binding(2) var<storage, read> indices : array<array<u32, 3>>;\n@group(0) @binding(3) var<storage, read> vertices : array<array<f32, 3>>;\n@group(0) @binding(4) var<storage, read_write> voxels : array<f32>;\n\n${yn({chunkSize:e})}\n\nstruct AxisTest {\n  ann : vec3<f32>,\n  fnn : vec3<f32>,\n  aa : i32,\n  bb : i32,\n}\n\nfn intersects(triangle : array<vec3<f32>, 3>, voxel : vec3<f32>) -> bool {\n  var v0 : vec3<f32> = triangle[0] - voxel;\n  var v1 : vec3<f32> = triangle[1] - voxel;\n  var v2 : vec3<f32> = triangle[2] - voxel;\n\n  var f0 : vec3<f32> = v1 - v0;\n  var f1 : vec3<f32> = v2 - v1;\n  var f2 : vec3<f32> = v0 - v2;\n\n  var axis_test = array<AxisTest, 9>(\n    AxisTest(vec3<f32>(0, -f0.z, f0.y), f0, 1, 2),\n    AxisTest(vec3<f32>(0, -f1.z, f1.y), f1, 1, 2),\n    AxisTest(vec3<f32>(0, -f2.z, f2.y), f2, 1, 2),\n    AxisTest(vec3<f32>(f0.z, 0, -f0.x), f0, 0, 2),\n    AxisTest(vec3<f32>(f1.z, 0, -f1.x), f1, 0, 2),\n    AxisTest(vec3<f32>(f2.z, 0, -f2.x), f2, 0, 2),\n    AxisTest(vec3<f32>(-f0.y, f0.x, 0), f0, 0, 1),\n    AxisTest(vec3<f32>(-f1.y, f1.x, 0), f1, 0, 1),\n    AxisTest(vec3<f32>(-f2.y, f2.x, 0), f2, 0, 1),\n  );\n\n  for (var i : i32 = 0; i < 9; i++) {\n    var t : AxisTest = axis_test[i];\n    var p0 : f32 = dot(v0, t.ann);\n    var p1 : f32 = dot(v1, t.ann);\n    var p2 : f32 = dot(v2, t.ann);\n    var r : f32 = 0.5 * abs(t.fnn[t.bb]) + 0.5 * abs(t.fnn[t.aa]);\n    if (max(-max(p0, max(p1, p2)), min(p0, min(p1, p2))) > r) {\n      return false;\n    }\n  }\n\n  if (max(v0.x, max(v1.x, v2.x)) < -0.5 || min(v0.x, min(v1.x, v2.x)) > 0.5) {\n    return false;\n  }\n  if (max(v0.y, max(v1.y, v2.y)) < -0.5 || min(v0.y, min(v1.y, v2.y)) > 0.5) {\n    return false;\n  }\n  if (max(v0.z, max(v1.z, v2.z)) < -0.5 || min(v0.z, min(v1.z, v2.z)) > 0.5) {\n    return false;\n  }\n\n  var planeNorm : vec3<f32> = normalize(cross(f1, f0));\n  var planeConst : f32 = dot(planeNorm, triangle[0]);\n  var r : f32 = 0.5 * abs(planeNorm.x) + 0.5 * abs(planeNorm.y) + 0.5 * abs(planeNorm.z);\n  var s : f32 = abs(dot(planeNorm, voxel) - planeConst);\n  return s <= r;\n}\n\nfn getVertex(index : u32) -> vec3<f32> {\n  var vertex : vec4<f32> = vec4<f32>(vertices[index][0], vertices[index][1], vertices[index][2], 1);\n  return (transform * vertex).xyz - vec3<f32>(chunk);\n}\n\nconst triangles : u32 = ${t};\n\n${n}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : u32 = GlobalInvocationID.x;\n  if (id >= triangles) {\n    return;\n  }\n\n  var triangle = array<vec3<f32>, 3>(\n    getVertex(indices[id][0]),\n    getVertex(indices[id][1]),\n    getVertex(indices[id][2]),\n  );\n\n  var tmin : vec3<i32> = vec3<i32>(chunkSize);\n  var tmax : vec3<i32> = vec3<i32>(0);\n  for (var i : i32 = 0; i < 3; i++) {\n    var p = vec3<i32>(triangle[i]);\n    tmin = min(tmin, p);\n    tmax = max(tmax, p);\n  }\n  tmin = clamp(tmin, vec3<i32>(0), vec3<i32>(chunkSize - 1));\n  tmax = clamp(tmax, vec3<i32>(0), vec3<i32>(chunkSize - 1));\n\n  for (var z : i32 = tmin.z; z <= tmax.z; z++) {\n    for (var y : i32 = tmin.y; y <= tmax.y; y++) {\n      for (var x : i32 = tmin.x; x <= tmax.x; x++) {\n        if (intersects(triangle, vec3<f32>(f32(x) + 0.5, f32(y) + 0.5, f32(z) + 0.5))) {\n          var pos : vec3<i32> = vec3<i32>(x, y, z);\n          voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n        }\n      }\n    }\n  }\n}\n`)({chunkSize:n.chunkSize,source:e.source||"\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  return 1;\n}\n",triangles:t}),this.shader=n.device.createShaderModule({code:this.code}),this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:this.shader,entryPoint:"main"}}),this.transform=new zn({device:n.device,position:e.position,rotation:e.rotation,scale:e.scale}),this.indices=n.device.createBuffer({mappedAtCreation:!0,size:e.indices.byteLength,usage:GPUBufferUsage.STORAGE}),new Uint32Array(this.indices.getMappedRange()).set(e.indices),this.indices.unmap(),this.vertices=n.device.createBuffer({mappedAtCreation:!0,size:e.vertices.byteLength,usage:GPUBufferUsage.STORAGE}),new Float32Array(this.vertices.getMappedRange()).set(e.vertices),this.vertices.unmap(),this.bindings=n.chunks.map((({position:e,voxels:t})=>({bindings:n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e,this.transform.buffer,this.indices,this.vertices,t].map(((e,n)=>({binding:n,resource:{buffer:e}})))}),clearChunk:e=>e.clearBuffer(t)}))),this.workgroups=Math.ceil(t/64)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((({bindings:n,clearChunk:o})=>{o(e);const i=e.beginComputePass();i.setPipeline(t),i.setBindGroup(0,n),i.dispatchWorkgroups(r),i.end()}))}destroy(){const{transform:e,indices:n,vertices:t}=this;e.destroy(),n.destroy(),t.destroy()}}class kn{constructor({source:e,volume:n}){this.code=(({chunkSize:e,width:n,height:t,depth:r,source:o})=>`\n@group(0) @binding(0) var<uniform> time : f32;\n@group(0) @binding(1) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(2) var<storage, read_write> voxels : array<f32>;\n\n${cn}\n${vn}\nfn sdBox(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = abs(p) - r;\n  return length(max(q, vec3<f32>(0))) + min(max(q.x, max(q.y, q.z)), 0);\n}\n\nfn sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = vec3<f32>(p.x, clamp(p.y, -r.y + r.x, r.y - r.x), p.y);\n  return length(q) - q.x;\n}\n\nfn sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var k0 : f32 = length(p / r);\n  var k1 : f32 = length(p / (r * r));\n  return k0 * (k0 - 1.0) / k1;\n}\n\nfn sdSphere(p : vec3<f32>, r : f32) -> f32 {\n  return length(p) - r;\n}\n\nfn sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32 {\n  var q : vec2<f32> = vec2<f32>(length(p.xz) - r.x, p.y);\n  return length(q) - r.y;\n}\n\nfn opUnion(d1 : f32, d2 : f32) -> f32 {\n  return min(d1, d2);\n}\n\nfn opSubstraction(d1 : f32, d2 : f32) -> f32 {\n  return max(d1, -d2);\n}\n\nfn opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 + 0.5 * (d2 - d1) / k, 0, 1);\n  return mix(d2, d1, h) + k * h * (1 - h);\n}\n\nfn opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 - 0.5 * (d2 + d1) / k, 0, 1);\n  return mix(d1, -d2, h) + k * h * (1 - h);\n}\n\n${yn({chunkSize:e})}\n\nstruct Volume {\n  center : vec3<f32>,\n  size : vec3<f32>,\n}\n\nconst volume : Volume = Volume(\n  vec3<f32>(${.5*n}, ${.5*t}, ${.5*r}),\n  vec3<f32>(${n}, ${t}, ${r})\n);\n\n${o}\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n}\n`)({chunkSize:n.chunkSize,width:n.width,height:n.height,depth:n.depth,source:e}),this.shader=n.device.createShaderModule({code:this.code}),this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:this.shader,entryPoint:"main"}}),this.bindings=n.chunks.map((({position:e,voxels:t})=>n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[n.time.buffer,e,t].map(((e,n)=>({binding:n,resource:{buffer:e}})))}))),this.workgroups=Math.ceil(n.chunkSize/4)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((n=>{const o=e.beginComputePass();o.setPipeline(t),o.setBindGroup(0,n),o.dispatchWorkgroups(r,r,r),o.end()}))}}class Sn{constructor({device:e,chunk:n,chunkSize:t}){this.chunk=n,this.faces=e.createBuffer({mappedAtCreation:!0,size:4*Uint32Array.BYTES_PER_ELEMENT+6*Math.ceil(t*t*t*.5)*4*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX}),new Uint32Array(this.faces.getMappedRange())[0]=6,this.faces.unmap(),this.position=e.createBuffer({mappedAtCreation:!0,size:3*Int32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM}),new Int32Array(this.position.getMappedRange()).set([n.x*t,n.y*t,n.z*t]),this.position.unmap(),this.voxels=Sn.createVoxelsBuffer({device:e,chunkSize:t})}destroy(){const{faces:e,position:n,voxels:t}=this;e.destroy(),n.destroy(),t.destroy()}resetInstanceCount(e){const{faces:n}=this;e.clearBuffer(n,4,4)}static createVoxelsBuffer({device:e,chunkSize:n}){return e.createBuffer({size:n*n*n*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE})}}class En{constructor({device:e}){this.device=e,this.data=new Float32Array(1),this.buffer=e.createBuffer({size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM})}destroy(){const{buffer:e}=this;e.destroy()}set(e){const{device:n,buffer:t,data:r}=this;r[0]=e,n.queue.writeBuffer(t,0,r)}}class Tn{constructor({chunkSize:e=100,device:n,width:t,height:r,depth:o}){this.chunkSize=e,this.device=n,this.width=t,this.height=r,this.depth=o;const i={x:Math.ceil(t/e),y:Math.ceil(r/e),z:Math.ceil(o/e)};this.chunks=[];for(let t=0;t<i.z;t++)for(let r=0;r<i.y;r++)for(let o=0;o<i.x;o++)this.chunks.push(new Sn({device:n,chunk:{x:o,y:r,z:t},chunkSize:e}));this.edge=Sn.createVoxelsBuffer({device:n,chunkSize:e}),this.mesher=new wn({chunks:i,volume:this}),this.time=new En({device:n})}compute(e,n){const{mesher:t,time:r,voxelizer:o}=this;r.set(n),o.compute(e),t.compute(e)}destroy(){const{chunks:e,edge:n,time:t,voxelizer:r}=this;e.forEach((e=>e.destroy())),n.destroy(),t.destroy(),r&&r.destroy&&r.destroy()}setScene(e){const{voxelizer:n}=this;n&&n.destroy&&n.destroy(),e.geometry?this.voxelizer=new $n({geometry:e.geometry,volume:this}):e.source&&(this.voxelizer=new kn({source:e.source,volume:this}))}}class _n{constructor(e){this.look={state:sn(.5*Math.PI,0),target:sn(.5*Math.PI,0)},this.pointer={movement:on(),position:on()},this.zoom={state:.75,target:.75},this.target=e,this.updateBounds(),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onMouseWheel=this.onMouseWheel.bind(this),e.addEventListener("mousedown",this.onMouseDown,!1),window.addEventListener("mousemove",this.onMouseMove,!1),window.addEventListener("mouseup",this.onMouseUp,!1),window.addEventListener("wheel",this.onMouseWheel,{passive:!1})}destroy(){this.target.removeEventListener("mousedown",this.onMouseDown),window.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("mouseup",this.onMouseUp),window.removeEventListener("wheel",this.onMouseWheel)}onMouseDown({button:e}){const{pointer:n}=this;n.isDown=0===e}onMouseMove({clientX:e,clientY:n,movementX:t,movementY:r}){const{sensitivity:o}=_n,{bounds:i,pointer:{movement:s,position:a}}=this;s[0]-=t*o.look,s[1]-=r*o.look,an(a,(e-i.x)/i.width*2-1,-(n-i.y)/i.height*2+1)}onMouseUp({button:e}){const{pointer:n}=this;0===e&&(n.isDown=!1)}onMouseWheel(e){e.ctrlKey&&e.preventDefault();const{sensitivity:n,minZoom:t,zoomRange:r}=_n,{zoom:o}=this,i=Math.min(Math.max((Math.log(o.target)-t)/r+e.deltaY*n.zoom,0),1);o.target=Math.exp(t+i*r)}update(e){const{minPhi:n,maxPhi:t}=_n,{pointer:r,look:o,zoom:i}=this;r.isDown&&(o.target[1]+=r.movement[0],o.target[0]=Math.min(Math.max(o.target[0]+r.movement[1],n),t));const s=1-Math.exp(-10*e);!function(e,n,t,r){var o=n[0],i=n[1];e[0]=o+r*(t[0]-o),e[1]=i+r*(t[1]-i)}(o.state,o.state,o.target,s),i.state=i.state*(1-s)+i.target*s,an(r.movement,0,0)}updateBounds(){const{target:e}=this;this.bounds=e.getBoundingClientRect()}}function Mn(n){let t;return{c(){t=g("div"),z(t,"class","wrapper svelte-jszh57")},m(e,r){v(e,t,r),n[1](t)},p:e,i:e,o:e,d(e){e&&h(t),n[1](null)}}}function Pn(e,n,t){const r=e=>[parseInt(e.slice(1,3),16)/255,parseInt(e.slice(3,5),16)/255,parseInt(e.slice(5,7),16)/255];let o;return P((()=>{const e=new _n(o),n=new xn(se.gpu);o.appendChild(n.canvas),n.setSize(window.innerWidth,window.innerHeight),n.setSize(e.bounds.width,e.bounds.height),window.addEventListener("resize",(()=>{e.updateBounds(),n.setSize(e.bounds.width,e.bounds.height)}),!1);let t,i=performance.now()/1e3,s=!1;const a=()=>{requestAnimationFrame(a);const r=performance.now()/1e3,o=r-i;if(i=r,e.update(o),n.camera.setOrbit(e.look.state[0],e.look.state[1],t.width*e.zoom.state),s)return;const c=n.device.createCommandEncoder();t.compute(c,r),n.render(c,t),n.device.queue.submit([c.finish()])};requestAnimationFrame(a);const c=({code:e,shader:n},t)=>{s=!1;const r=e.split("\n"),o=r.indexOf("// __SOURCE__")+1;n.compilationInfo().then((({messages:e})=>t.set(e.map((({length:e,lineNum:n,linePos:t,message:i,type:a})=>{s=!0;const c=r[n-1],u=Array.from({length:t-1+e},((e,n)=>n>=t-1?"^":" ")).join("");return[`:${n-o}:${t} ${a}: ${i}`,`${c}`,`${u}`]})))))},u=[oe.source.subscribe((e=>{e="// __SOURCE__\n"+e,n.atlas.compute(e),c(n.atlas,oe.errors)})),se.background.subscribe((e=>n.setClearColor(...r(e)))),se.effects.edges.color.subscribe((e=>{n.postprocessing.effects.edges.color=r(e)})),se.effects.edges.intensity.subscribe((e=>{n.postprocessing.effects.edges.intensity=e})),se.resolution.subscribe((e=>{let r;t&&(r=t.source,t.destroy()),t=new Tn({device:n.device,width:e,height:e,depth:e}),r&&(t.source=r,t.setScene({source:r})),rn(n.camera.target,.5*t.width,.5*t.height,.5*t.depth)})),ae.source.subscribe((e=>{t.source=e,e="// __SOURCE__\n"+e,t.setScene({source:e}),c(t.voxelizer,ae.errors)}))];return()=>{u.forEach((e=>e())),e.destroy(),t.destroy()}})),[o,function(e){B[e?"unshift":"push"]((()=>{o=e,t(0,o)}))}]}_n.sensitivity={look:.003,zoom:3e-4},_n.minPhi=1e-6,_n.maxPhi=Math.PI-1e-6,_n.minZoom=Math.log(.25),_n.maxZoom=Math.log(1.5),_n.zoomRange=_n.maxZoom-_n.minZoom;class An extends ne{constructor(e){super(),ee(this,e,Pn,Mn,i,{})}}function Bn(e){let n,t;return n=new me({props:{$$slots:{viewport:[Gn],ui:[Vn]},$$scope:{ctx:e}}}),{c(){K(n.$$.fragment)},m(e,r){J(n,e,r),t=!0},p(e,t){const r={};20&t&&(r.$$scope={dirty:t,ctx:e}),n.$set(r)},i(e){t||(X(n.$$.fragment,e),t=!0)},o(e){Z(n.$$.fragment,e),t=!1},d(e){Q(n,e)}}}function Cn(n){let t;return{c(){t=g("div"),t.innerHTML='Sorry! This works only in <a href="https://www.google.com/chrome/canary/" rel="noopener noreferrer" target="_blank" class="svelte-4omflb">Chrome Canary</a>.',z(t,"class","canary svelte-4omflb")},m(e,n){v(e,t,n)},p:e,i:e,o:e,d(e){e&&h(t)}}}function Un(n){let t;return{c(){t=g("div"),t.textContent="Loading...",z(t,"class","loading svelte-4omflb")},m(e,n){v(e,t,n)},p:e,i:e,o:e,d(e){e&&h(t)}}}function Rn(e){let n,t;return n=new Pe({}),{c(){K(n.$$.fragment)},m(e,r){J(n,e,r),t=!0},i(e){t||(X(n.$$.fragment,e),t=!0)},o(e){Z(n.$$.fragment,e),t=!1},d(e){Q(n,e)}}}function In(e){let n,t;return n=new Se({}),{c(){K(n.$$.fragment)},m(e,r){J(n,e,r),t=!0},i(e){t||(X(n.$$.fragment,e),t=!0)},o(e){Z(n.$$.fragment,e),t=!1},d(e){Q(n,e)}}}function Ln(e){let n,t;return n=new Be({}),{c(){K(n.$$.fragment)},m(e,r){J(n,e,r),t=!0},i(e){t||(X(n.$$.fragment,e),t=!0)},o(e){Z(n.$$.fragment,e),t=!1},d(e){Q(n,e)}}}function Vn(e){let n,t,r,o,i,s;n=new Ze({});const a=[Ln,In,Rn],c=[];function u(e,n){return"scene"===e[2]?0:"atlas"===e[2]?1:"rendering"===e[2]?2:-1}return~(r=u(e))&&(o=c[r]=a[r](e)),{c(){K(n.$$.fragment),t=y(),o&&o.c(),i=b()},m(e,o){J(n,e,o),v(e,t,o),~r&&c[r].m(e,o),v(e,i,o),s=!0},p(e,n){let t=r;r=u(e),r!==t&&(o&&(j(),Z(c[t],1,1,(()=>{c[t]=null})),W()),~r?(o=c[r],o||(o=c[r]=a[r](e),o.c()),X(o,1),o.m(i.parentNode,i)):o=null)},i(e){s||(X(n.$$.fragment,e),X(o),s=!0)},o(e){Z(n.$$.fragment,e),Z(o),s=!1},d(e){Q(n,e),e&&h(t),~r&&c[r].d(e),e&&h(i)}}}function Gn(n){let t,r;return t=new An({props:{slot:"viewport"}}),{c(){K(t.$$.fragment)},m(e,n){J(t,e,n),r=!0},p:e,i(e){r||(X(t.$$.fragment,e),r=!0)},o(e){Z(t.$$.fragment,e),r=!1},d(e){Q(t,e)}}}function Nn(e){let n,t,r,o,i,s,a;const c=[Un,Cn,Bn],u=[];function l(e,n){return e[1]?0:e[0]?1:2}return n=l(e),t=u[n]=c[n](e),{c(){t.c(),r=y(),o=g("div"),o.innerHTML='voxeltoy - <a href="https://github.com/danielesteban/voxeltoy" rel="noopener noreferrer" target="_blank" class="svelte-4omflb">view source</a><br/> \n  <a href="https://dani.gatunes.com" rel="noopener noreferrer" target="_blank" class="svelte-4omflb">dani@gatunes</a> © 2022',i=y(),s=g("a"),s.textContent="♥ Become a sponsor",z(o,"class","info svelte-4omflb"),z(s,"class","ribbon svelte-4omflb"),z(s,"href","https://github.com/sponsors/danielesteban"),z(s,"data-ribbon","♥ Become a sponsor"),z(s,"rel","noopener noreferrer"),z(s,"target","_blank")},m(e,t){u[n].m(e,t),v(e,r,t),v(e,o,t),v(e,i,t),v(e,s,t),a=!0},p(e,[o]){let i=n;n=l(e),n===i?u[n].p(e,o):(j(),Z(u[i],1,1,(()=>{u[i]=null})),W(),t=u[n],t?t.p(e,o):(t=u[n]=c[n](e),t.c()),X(t,1),t.m(r.parentNode,r))},i(e){a||(X(t),a=!0)},o(e){Z(t),a=!1},d(e){u[n].d(e),e&&h(r),e&&h(o),e&&h(i),e&&h(s)}}}function qn(e,n,t){let r;s(e,ce,(e=>t(2,r=e)));let o=!1,i=!0;return Promise.all([(async()=>{if(!navigator.gpu||!navigator.gpu.getPreferredCanvasFormat)throw new Error("WebGPU");const e=await navigator.gpu.requestAdapter(),n=await e.requestDevice();return{adapter:e,device:n}})(),new Promise((e=>{require.config({paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs"}}),require(["vs/editor/editor.main"],e)}))]).then((([e])=>{se.gpu=e})).catch((e=>{console.error(e),t(0,o=!0)})).finally((()=>{t(1,i=!1)})),[o,i,r]}new class extends ne{constructor(e){super(),ee(this,e,qn,Nn,i,{})}}({target:document.body})}();
