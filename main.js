!function(){"use strict";function e(){}function t(e){return e()}function n(){return Object.create(null)}function r(e){e.forEach(t)}function o(e){return"function"==typeof e}function i(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function s(t,...n){if(null==t)return e;const r=t.subscribe(...n);return r.unsubscribe?()=>r.unsubscribe():r}function a(e,t,n){e.$$.on_destroy.push(s(t,n))}function c(e,t,n,r){if(e){const o=u(e,t,n,r);return e[0](o)}}function u(e,t,n,r){return e[1]&&r?function(e,t){for(const n in t)e[n]=t[n];return e}(n.ctx.slice(),e[1](r(t))):n.ctx}function l(e,t,n,r){if(e[2]&&r){const o=e[2](r(n));if(void 0===t.dirty)return o;if("object"==typeof o){const e=[],n=Math.max(t.dirty.length,o.length);for(let r=0;r<n;r+=1)e[r]=t.dirty[r]|o[r];return e}return t.dirty|o}return t.dirty}function f(e,t,n,r,o,i){if(o){const s=u(t,n,r,i);e.p(s,o)}}function p(e){if(e.ctx.length>32){const t=[],n=e.ctx.length/32;for(let e=0;e<n;e++)t[e]=-1;return t}return-1}function d(e,t){e.appendChild(t)}function v(e,t,n){e.insertBefore(t,n||null)}function h(e){e.parentNode.removeChild(e)}function m(e){return document.createElement(e)}function x(e){return document.createTextNode(e)}function g(){return x(" ")}function y(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function b(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function w(e){return""===e?null:+e}function z(e,t){e.value=null==t?"":t}function $(e,t,n,r){null===n?e.style.removeProperty(t):e.style.setProperty(t,n,r?"important":"")}function k(e,t,n){e.classList[n?"add":"remove"](t)}let S;function E(e){S=e}function M(e){(function(){if(!S)throw new Error("Function called outside component initialization");return S})().$$.on_mount.push(e)}const T=[],_=[],C=[],P=[],A=Promise.resolve();let B=!1;function U(){B||(B=!0,A.then(I))}function G(e){C.push(e)}const L=new Set;let R=0;function I(){const e=S;do{for(;R<T.length;){const e=T[R];R++,E(e),V(e.$$)}for(E(null),T.length=0,R=0;_.length;)_.pop()();for(let e=0;e<C.length;e+=1){const t=C[e];L.has(t)||(L.add(t),t())}C.length=0}while(T.length);for(;P.length;)P.pop()();B=!1,L.clear(),E(e)}function V(e){if(null!==e.fragment){e.update(),r(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(G)}}const F=new Set;let N;function q(){N={r:0,c:[],p:N}}function D(){N.r||r(N.c),N=N.p}function O(e,t){e&&e.i&&(F.delete(e),e.i(t))}function Y(e,t,n,r){if(e&&e.o){if(F.has(e))return;F.add(e),N.c.push((()=>{F.delete(e),r&&(n&&e.d(1),r())})),e.o(t)}else r&&r()}const j="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;function W(e){e&&e.c()}function X(e,n,i,s){const{fragment:a,on_mount:c,on_destroy:u,after_update:l}=e.$$;a&&a.m(n,i),s||G((()=>{const n=c.map(t).filter(o);u?u.push(...n):r(n),e.$$.on_mount=[]})),l.forEach(G)}function Z(e,t){const n=e.$$;null!==n.fragment&&(r(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function H(t,o,i,s,a,c,u,l=[-1]){const f=S;E(t);const p=t.$$={fragment:null,ctx:null,props:c,update:e,not_equal:a,bound:n(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(o.context||(f?f.$$.context:[])),callbacks:n(),dirty:l,skip_bound:!1,root:o.target||f.$$.root};u&&u(p.root);let d=!1;if(p.ctx=i?i(t,o.props||{},((e,n,...r)=>{const o=r.length?r[0]:n;return p.ctx&&a(p.ctx[e],p.ctx[e]=o)&&(!p.skip_bound&&p.bound[e]&&p.bound[e](o),d&&function(e,t){-1===e.$$.dirty[0]&&(T.push(e),U(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n})):[],p.update(),d=!0,r(p.before_update),p.fragment=!!s&&s(p.ctx),o.target){if(o.hydrate){const e=function(e){return Array.from(e.childNodes)}(o.target);p.fragment&&p.fragment.l(e),e.forEach(h)}else p.fragment&&p.fragment.c();o.intro&&O(t.$$.fragment),X(t,o.target,o.anchor,o.customElement),I()}E(f)}class K{$destroy(){Z(this,1),this.$destroy=e}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){var t;this.$$set&&(t=e,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const J=[];function Q(t,n=e){let r;const o=new Set;function s(e){if(i(t,e)&&(t=e,r)){const e=!J.length;for(const e of o)e[1](),J.push(e,t);if(e){for(let e=0;e<J.length;e+=2)J[e][0](J[e+1]);J.length=0}}}return{set:s,update:function(e){s(e(t))},subscribe:function(i,a=e){const c=[i,a];return o.add(c),1===o.size&&(r=n(s)||e),i(t),()=>{o.delete(c),0===o.size&&(r(),r=null)}}}}const ee=Q("fn getColorAt(texture : i32, pixel : vec2<i32>) -> vec4<f32> {\n  var h : f32 = f32(texture) / f32(atlas.count);\n  var s : f32 = 0.5;\n  var l : f32 = 0.5;\n  if (\n    pixel.x == 0 || pixel.x == (atlas.width - 1)\n    || pixel.y == 0 || pixel.y == (atlas.height - 1)\n  ) {\n    l = min(l * 1.1, 1);\n  }\n  return hsl2Rgba(h, s, l);\n}\n"),te={clearColor:Q("#000000"),effects:{edges:{color:Q("#000000"),intensity:Q(.3)}},gpu:null},ne=Q("// VoxelToy\n\n// SDF primitives\n// sdBox(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdSphere(p : vec3<f32>, r : f32) -> f32\n// sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32\n\n// SDF operations\n// opUnion(d1 : f32, d2 : f32) -> f32\n// opSubstraction(d1 : f32, d2 : f32) -> f32\n// opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32\n// opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32\n\n// Noise functions\n// noise3(p: vec3<f32>) -> f32\n// simplexNoise3(v: vec3<f32>) -> f32\n\n// Rotation helpers\n// rotateX(rad : f32) -> mat3x3<f32>\n// rotateY(rad : f32) -> mat3x3<f32>\n// rotateZ(rad : f32) -> mat3x3<f32>\n\n// Variables\n// time : f32\n// volume.size : vec3<f32>\n// volume.center : vec3<f32>\n\nfn distanceToScene(pos : vec3<f32>) -> f32 {\n  var origin : vec3<f32> = pos - volume.center;\n  var t : f32 = sin(time * 2);\n  var size : f32 = volume.size.x * (0.25 + t * 0.01);\n  return opSmoothUnion(\n    sdSphere(origin - vec3<f32>(size * (0.6 * t * -1), size * 0.2 * t * -1, 0), size),\n    sdSphere(origin - vec3<f32>(size * (0.6 * t), size * 0.2 * t, 0), size),\n    100\n  );\n}\n\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  if (distanceToScene(pos) > 0.01) {\n    return 0;\n  }\n  return 1 + abs(simplexNoise3(pos * 0.01)) * 254;\n}\n"),re=Q("scene"),{window:oe}=j,ie=e=>({}),se=e=>({}),ae=e=>({}),ce=e=>({});function ue(e){let t,n,o,i,s,a,u,x;const w=e[5].editor,z=c(w,e,e[4],ce),k=e[5].viewport,S=c(k,e,e[4],se);return{c(){t=m("div"),n=m("div"),z&&z.c(),o=g(),i=m("div"),s=g(),S&&S.c(),b(n,"class","editor svelte-jdh4e4"),b(i,"class","divider svelte-jdh4e4"),b(t,"class","layout svelte-jdh4e4"),$(t,"--editorWidth",e[0]+"px")},m(r,c){v(r,t,c),d(t,n),z&&z.m(n,null),d(t,o),d(t,i),d(t,s),S&&S.m(t,null),a=!0,u||(x=[y(oe,"mousemove",e[1]),y(oe,"mouseup",e[2]),y(i,"mousedown",e[3])],u=!0)},p(e,[n]){z&&z.p&&(!a||16&n)&&f(z,w,e,e[4],a?l(w,e[4],n,ae):p(e[4]),ce),S&&S.p&&(!a||16&n)&&f(S,k,e,e[4],a?l(k,e[4],n,ie):p(e[4]),se),(!a||1&n)&&$(t,"--editorWidth",e[0]+"px")},i(e){a||(O(z,e),O(S,e),a=!0)},o(e){Y(z,e),Y(S,e),a=!1},d(e){e&&h(t),z&&z.d(e),S&&S.d(e),u=!1,r(x)}}}function le(e,t,n){let{$$slots:r={},$$scope:o}=t;const i={enabled:!1,initial:0,offset:0};let s=800;const a=({clientX:e})=>{i.enabled&&(n(0,s=Math.max(Math.floor(i.initial+e-i.offset),400)),(U(),A).then((()=>window.dispatchEvent(new Event("resize")))))};return e.$$set=e=>{"$$scope"in e&&n(4,o=e.$$scope)},[s,a,()=>{i.enabled&&(i.enabled=!1)},e=>{i.enabled=!0,i.initial=s,i.offset=e.clientX,a(e)},o,r]}class fe extends K{constructor(e){super(),H(this,e,le,ue,i,{})}}function pe(t){let n;return{c(){n=m("div"),b(n,"class","wrapper svelte-jszh57")},m(e,r){v(e,n,r),t[2](n)},p:e,i:e,o:e,d(e){e&&h(n),t[2](null)}}}function de(t,n,r){let o,i=e,a=()=>(i(),i=s(u,(e=>r(3,o=e))),u);t.$$.on_destroy.push((()=>i()));let c,{state:u}=n;return a(),M((()=>{let e;const t=monaco.editor.create(c,{value:o,language:"c",minimap:{enabled:!1},theme:"vs-dark"});t.onDidChangeModelContent((()=>{e&&clearTimeout(e),e=setTimeout((()=>u.set(t.getValue())),300)}));const n=()=>t.layout();return window.addEventListener("resize",n,!1),()=>{window.removeEventListener("resize",n),clearTimeout(e),t.dispose()}})),t.$$set=e=>{"state"in e&&a(r(0,u=e.state))},[u,c,function(e){_[e?"unshift":"push"]((()=>{c=e,r(1,c)}))}]}class ve extends K{constructor(e){super(),H(this,e,de,pe,i,{state:0})}}function he(t){let n,r;return n=new ve({props:{state:ee}}),{c(){W(n.$$.fragment)},m(e,t){X(n,e,t),r=!0},p:e,i(e){r||(O(n.$$.fragment,e),r=!0)},o(e){Y(n.$$.fragment,e),r=!1},d(e){Z(n,e)}}}class me extends K{constructor(e){super(),H(this,e,null,he,i,{})}}function xe(t){let n,o,i,s,a,c,u,l,f,p,x,$,k,S,E,M,T,_,C,P,A;return{c(){n=m("div"),o=m("div"),i=m("label"),i.textContent="Clear color:",s=g(),a=m("input"),c=g(),u=m("h4"),u.textContent="Effects",l=g(),f=m("h5"),f.textContent="Edges",p=g(),x=m("div"),$=m("label"),$.textContent="Color:",k=g(),S=m("input"),E=g(),M=m("div"),T=m("label"),T.textContent="Intensity:",_=g(),C=m("input"),b(i,"for","clearColor"),b(i,"class","svelte-s2vlxt"),b(a,"id","clearColor"),b(a,"type","color"),b(a,"class","svelte-s2vlxt"),b(o,"class","input svelte-s2vlxt"),b(u,"class","svelte-s2vlxt"),b(f,"class","svelte-s2vlxt"),b($,"for","edgesColor"),b($,"class","svelte-s2vlxt"),b(S,"id","edgesColor"),b(S,"type","color"),b(S,"class","svelte-s2vlxt"),b(x,"class","input svelte-s2vlxt"),b(T,"for","edgesIntensity"),b(T,"class","svelte-s2vlxt"),b(C,"id","edgesIntensity"),b(C,"type","number"),b(C,"min",0),b(C,"max",1),b(C,"step",.01),b(C,"class","svelte-s2vlxt"),b(M,"class","input svelte-s2vlxt"),b(n,"class","wrapper svelte-s2vlxt")},m(e,r){v(e,n,r),d(n,o),d(o,i),d(o,s),d(o,a),z(a,t[0]),d(n,c),d(n,u),d(n,l),d(n,f),d(n,p),d(n,x),d(x,$),d(x,k),d(x,S),z(S,t[1]),d(n,E),d(n,M),d(M,T),d(M,_),d(M,C),z(C,t[2]),P||(A=[y(a,"input",t[6]),y(S,"input",t[7]),y(C,"input",t[8])],P=!0)},p(e,[t]){1&t&&z(a,e[0]),2&t&&z(S,e[1]),4&t&&w(C.value)!==e[2]&&z(C,e[2])},i:e,o:e,d(e){e&&h(n),P=!1,r(A)}}}function ge(e,t,n){let r,o,i;const{clearColor:s,effects:{edges:{color:c,intensity:u}}}=te;return a(e,s,(e=>n(0,r=e))),a(e,c,(e=>n(1,o=e))),a(e,u,(e=>n(2,i=e))),[r,o,i,s,c,u,function(){r=this.value,s.set(r)},function(){o=this.value,c.set(o)},function(){i=w(this.value),u.set(i)}]}class ye extends K{constructor(e){super(),H(this,e,ge,xe,i,{})}}function be(t){let n,r;return n=new ve({props:{state:ne}}),{c(){W(n.$$.fragment)},m(e,t){X(n,e,t),r=!0},p:e,i(e){r||(O(n.$$.fragment,e),r=!0)},o(e){Y(n.$$.fragment,e),r=!1},d(e){Z(n,e)}}}class we extends K{constructor(e){super(),H(this,e,null,be,i,{})}}function ze(t){let n,o,i,s,a,c,u,l;return{c(){n=m("div"),o=m("div"),o.textContent="Scene",i=g(),s=m("div"),s.textContent="Atlas",a=g(),c=m("div"),c.textContent="Rendering",b(o,"class","svelte-zsnrl7"),k(o,"enabled","scene"===t[0]),b(s,"class","svelte-zsnrl7"),k(s,"enabled","atlas"===t[0]),b(c,"class","svelte-zsnrl7"),k(c,"enabled","rendering"===t[0]),b(n,"class","toolbar svelte-zsnrl7")},m(e,r){v(e,n,r),d(n,o),d(n,i),d(n,s),d(n,a),d(n,c),u||(l=[y(o,"click",t[1]("scene")),y(s,"click",t[1]("atlas")),y(c,"click",t[1]("rendering"))],u=!0)},p(e,[t]){1&t&&k(o,"enabled","scene"===e[0]),1&t&&k(s,"enabled","atlas"===e[0]),1&t&&k(c,"enabled","rendering"===e[0])},i:e,o:e,d(e){e&&h(n),u=!1,r(l)}}}function $e(e,t,n){let r;a(e,re,(e=>n(0,r=e)));return[r,e=>()=>{!function(e,t,n){e.set(n)}(re,r=e,r)}]}class ke extends K{constructor(e){super(),H(this,e,$e,ze,i,{})}}var Se=1e-6,Ee="undefined"!=typeof Float32Array?Float32Array:Array,Me=Math.PI/180;function Te(){var e=new Ee(16);return Ee!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function _e(e,t,n,r){var o=t[0],i=t[1],s=t[2],a=t[3],c=o+o,u=i+i,l=s+s,f=o*c,p=o*u,d=o*l,v=i*u,h=i*l,m=s*l,x=a*c,g=a*u,y=a*l,b=r[0],w=r[1],z=r[2];return e[0]=(1-(v+m))*b,e[1]=(p+y)*b,e[2]=(d-g)*b,e[3]=0,e[4]=(p-y)*w,e[5]=(1-(f+m))*w,e[6]=(h+x)*w,e[7]=0,e[8]=(d+g)*z,e[9]=(h-x)*z,e[10]=(1-(f+v))*z,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var Ce=function(e,t,n,r,o){var i,s=1/Math.tan(t/2);return e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e};function Pe(){var e=new Ee(3);return Ee!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function Ae(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e}function Be(){var e=new Ee(2);return Ee!=Float32Array&&(e[0]=0,e[1]=0),e}function Ue(e,t){var n=new Ee(2);return n[0]=e,n[1]=t,n}function Ge(e,t,n){return e[0]=t,e[1]=n,e}Pe(),function(){var e=Be()}();var Le="fn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfn noise3(p: vec3<f32>) -> f32 {\n  let a = floor(p);\n  var d: vec3<f32> = p - a;\n  d = d * d * (3. - 2. * d);\n\n  let b = a.xxyy + vec4<f32>(0., 1., 0., 1.);\n  let k1 = permute4(b.xyxy);\n  let k2 = permute4(k1.xyxy + b.zzww);\n\n  let c = k2 + a.zzzz;\n  let k3 = permute4(c);\n  let k4 = permute4(c + 1.);\n\n  let o1 = fract(k3 * (1. / 41.));\n  let o2 = fract(k4 * (1. / 41.));\n\n  let o3 = o2 * d.z + o1 * (1. - d.z);\n  let o4 = o3.yw * d.x + o3.xz * (1. - d.x);\n\n  return o4.y * d.y + o4.x * (1. - d.y);\n}\n\nfn simplexNoise3(v: vec3<f32>) -> f32 {\n  let C = vec2<f32>(1. / 6., 1. / 3.);\n  let D = vec4<f32>(0., 0.5, 1., 2.);\n\n  var i: vec3<f32>  = floor(v + dot(v, C.yyy));\n  let x0 = v - i + dot(i, C.xxx);\n\n  let g = step(x0.yzx, x0.xyz);\n  let l = 1.0 - g;\n  let i1 = min(g.xyz, l.zxy);\n  let i2 = max(g.xyz, l.zxy);\n\n  let x1 = x0 - i1 + 1. * C.xxx;\n  let x2 = x0 - i2 + 2. * C.xxx;\n  let x3 = x0 - 1. + 3. * C.xxx;\n\n  i = i % vec3<f32>(289.);\n  let p = permute4(permute4(permute4(\n      i.z + vec4<f32>(0., i1.z, i2.z, 1. )) +\n      i.y + vec4<f32>(0., i1.y, i2.y, 1. )) +\n      i.x + vec4<f32>(0., i1.x, i2.x, 1. ));\n\n  var n_: f32 = 1. / 7.;\n  let ns = n_ * D.wyz - D.xzx;\n\n  let j = p - 49. * floor(p * ns.z * ns.z);\n\n  let x_ = floor(j * ns.z);\n  let y_ = floor(j - 7.0 * x_);\n\n  let x = x_ *ns.x + ns.yyyy;\n  let y = y_ *ns.x + ns.yyyy;\n  let h = 1.0 - abs(x) - abs(y);\n\n  let b0 = vec4<f32>( x.xy, y.xy );\n  let b1 = vec4<f32>( x.zw, y.zw );\n\n  let s0 = floor(b0)*2.0 + 1.0;\n  let s1 = floor(b1)*2.0 + 1.0;\n  let sh = -step(h, vec4<f32>(0.));\n\n  let a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  let a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  var p0: vec3<f32> = vec3<f32>(a0.xy, h.x);\n  var p1: vec3<f32> = vec3<f32>(a0.zw, h.y);\n  var p2: vec3<f32> = vec3<f32>(a1.xy, h.z);\n  var p3: vec3<f32> = vec3<f32>(a1.zw, h.w);\n\n  let norm = taylorInvSqrt4(vec4<f32>(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n  p0 = p0 * norm.x;\n  p1 = p1 * norm.y;\n  p2 = p2 * norm.z;\n  p3 = p3 * norm.w;\n\n  var m: vec4<f32> = 0.6 - vec4<f32>(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n  m = max(m, vec4<f32>(0.));\n  m = m * m;\n  return 42. * dot(m * m, vec4<f32>(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n";const Re=({count:e,width:t,height:n,generator:r})=>`\n@group(0) @binding(0) var texture : texture_storage_2d_array<rgba8unorm, write>;\n\n${Le}\n\nstruct Atlas {\n  count : i32,\n  width : i32,\n  height : i32,\n  stride : i32,\n  length : i32,\n}\n\nconst atlas : Atlas = Atlas(\n  ${e},\n  ${t},\n  ${n},\n  ${t*n},\n  ${e*t*n},\n);\n\nfn hue2Rgb(p : f32, q : f32, t : f32) -> f32 {\n  var h : f32 = t;\n  if (h < 0) { h += 1; }\n  if (h > 1) { h -= 1; }\n  if (h < 1 / 6.0) { return p + (q - p) * 6 * h; }\n  if (h < 1 / 2.0) { return q; }\n  if (h < 2 / 3.0) { return p + (q - p) * (2.0 / 3.0 - h) * 6; }\n  return p;\n}\n\nfn hsl2Rgba(h : f32, s: f32, l: f32) -> vec4<f32> {\n  var rgba : vec4<f32> = vec4<f32>(0, 0, 0, 1);\n  if (s == 0) {\n    rgba.r = l;\n    rgba.g = l;\n    rgba.b = l;\n  } else {\n    var q : f32;\n    if (l < 0.5) {\n      q = l * (1 + s);\n    } else {\n      q = l + s - l * s;\n    }\n    var p : f32 = 2 * l - q;\n    rgba.r = hue2Rgb(p, q, h + 1 / 3.0);\n    rgba.g = hue2Rgb(p, q, h);\n    rgba.b = hue2Rgb(p, q, h - 1 / 3.0);\n  }\n  return rgba;\n};\n\n${r}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : i32 = i32(GlobalInvocationID.x);\n  if (id >= atlas.length) {\n    return;\n  }\n  var tex : i32 = id / atlas.stride;\n  var index : i32 = id - tex * atlas.stride;\n  var y : i32 = index / atlas.width;\n  var pixel : vec2<i32> = vec2<i32>(index - y * atlas.width, y);\n  textureStore(texture, pixel, tex, getColorAt(tex, pixel));\n}\n`;class Ie{constructor({device:e,count:t=254,width:n=16,height:r=16}){this.device=e,this.count=t,this.width=n,this.height=r,this.texture=e.createTexture({dimension:"2d",size:[n,r,t],format:"rgba8unorm",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})}compute(e="\nfn getColorAt(texture : i32, pixel : vec2<i32>) -> vec4<f32> {\n  var h : f32 = f32(texture) / f32(atlas.count);\n  var s : f32 = 0.5;\n  var l : f32 = 0.5;\n  if (pixel.x == 0 || pixel.y == 0 || pixel.x == (atlas.width - 1) || pixel.y == (atlas.height - 1)) {\n    l = min(l * 1.1, 1);\n  }\n  return hsl2Rgba(h, s, l);\n}\n"){if(this.generator===e)return;this.generator=e;const{device:t,count:n,width:r,height:o,texture:i}=this,s=t.createComputePipeline({layout:"auto",compute:{module:t.createShaderModule({code:Re({count:n,width:r,height:o,generator:e})}),entryPoint:"main"}}),a=t.createCommandEncoder(),c=a.beginComputePass();c.setPipeline(s),c.setBindGroup(0,t.createBindGroup({layout:s.getBindGroupLayout(0),entries:[{binding:0,resource:i.createView()}]})),c.dispatchWorkgroups(Math.ceil(n*r*o/64)),c.end(),t.queue.submit([a.finish()])}}const Ve=Te(),Fe=Pe(),Ne=function(e,t,n){var r=new Ee(3);return r[0]=e,r[1]=t,r[2]=n,r}(0,1,0);class qe{constructor({device:e,aspect:t=1,fov:n=75,near:r=.1,far:o=1e3}){this.device=e,this.buffer=e.createBuffer({size:41*Float32Array.BYTES_PER_ELEMENT+12,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),this.aspect=t,this.fov=n,this.near=r,this.far=o,this.position=Pe(),this.target=Pe(),this.projectionMatrix=Te(),this.viewBuffer=new Float32Array(25),this.viewMatrix=this.viewBuffer.subarray(0,16),this.normalMatrix=this.viewBuffer.subarray(16,25)}setOrbit(e,t,n){const{position:r,target:o}=this,i=Math.sin(e)*n;(function(e,t,n){e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2]})(r,o,Ae(Fe,i*Math.sin(t),Math.cos(e)*n,i*Math.cos(t))),this.updateView()}updateProjection(){const{device:e,buffer:t,projectionMatrix:n,aspect:r,fov:o,near:i,far:s}=this;Ce(n,function(e){return e*Me}(o),r,i,s),e.queue.writeBuffer(t,0,n)}updateView(){const{device:e,buffer:t,viewBuffer:n,viewMatrix:r,normalMatrix:o,position:i,target:s}=this;var a,c,u,l,f,p,d,v,h,m,x,g,y,b,w,z,$,k,S,E,M,T,_;a=r,u=s,l=Ne,w=(c=i)[0],z=c[1],$=c[2],k=l[0],S=l[1],E=l[2],M=u[0],T=u[1],_=u[2],Math.abs(w-M)<Se&&Math.abs(z-T)<Se&&Math.abs($-_)<Se?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(a):(x=w-M,g=z-T,y=$-_,f=S*(y*=b=1/Math.hypot(x,g,y))-E*(g*=b),p=E*(x*=b)-k*y,d=k*g-S*x,(b=Math.hypot(f,p,d))?(f*=b=1/b,p*=b,d*=b):(f=0,p=0,d=0),v=g*d-y*p,h=y*f-x*d,m=x*p-g*f,(b=Math.hypot(v,h,m))?(v*=b=1/b,h*=b,m*=b):(v=0,h=0,m=0),a[0]=f,a[1]=v,a[2]=x,a[3]=0,a[4]=p,a[5]=h,a[6]=g,a[7]=0,a[8]=d,a[9]=m,a[10]=y,a[11]=0,a[12]=-(f*w+p*z+d*$),a[13]=-(v*w+h*z+m*$),a[14]=-(x*w+g*z+y*$),a[15]=1),function(e,t){var n=t[0],r=t[1],o=t[2],i=t[3],s=t[4],a=t[5],c=t[6],u=t[7],l=t[8],f=t[9],p=t[10],d=t[11],v=t[12],h=t[13],m=t[14],x=t[15],g=n*a-r*s,y=n*c-o*s,b=n*u-i*s,w=r*c-o*a,z=r*u-i*a,$=o*u-i*c,k=l*h-f*v,S=l*m-p*v,E=l*x-d*v,M=f*m-p*h,T=f*x-d*h,_=p*x-d*m,C=g*_-y*T+b*M+w*E-z*S+$*k;C&&(C=1/C,e[0]=(a*_-c*T+u*M)*C,e[1]=(c*E-s*_-u*S)*C,e[2]=(s*T-a*E+u*k)*C,e[3]=(o*T-r*_-i*M)*C,e[4]=(n*_-o*E+i*S)*C,e[5]=(r*E-n*T-i*k)*C,e[6]=(h*$-m*z+x*w)*C,e[7]=(m*b-v*$-x*y)*C,e[8]=(v*z-h*b+x*g)*C)}(o,function(e,t){var n=t[0],r=t[1],o=t[2],i=t[3],s=t[4],a=t[5],c=t[6],u=t[7],l=t[8],f=t[9],p=t[10],d=t[11],v=t[12],h=t[13],m=t[14],x=t[15],g=n*a-r*s,y=n*c-o*s,b=n*u-i*s,w=r*c-o*a,z=r*u-i*a,$=o*u-i*c,k=l*h-f*v,S=l*m-p*v,E=l*x-d*v,M=f*m-p*h,T=f*x-d*h,_=p*x-d*m,C=g*_-y*T+b*M+w*E-z*S+$*k;return C?(C=1/C,e[0]=(a*_-c*T+u*M)*C,e[1]=(o*T-r*_-i*M)*C,e[2]=(h*$-m*z+x*w)*C,e[3]=(p*z-f*$-d*w)*C,e[4]=(c*E-s*_-u*S)*C,e[5]=(n*_-o*E+i*S)*C,e[6]=(m*b-v*$-x*y)*C,e[7]=(l*$-p*b+d*y)*C,e[8]=(s*T-a*E+u*k)*C,e[9]=(r*E-n*T-i*k)*C,e[10]=(v*z-h*b+x*g)*C,e[11]=(f*b-l*z-d*g)*C,e[12]=(a*S-s*M-c*k)*C,e[13]=(n*M-r*S+o*k)*C,e[14]=(h*y-v*w-m*g)*C,e[15]=(l*w-f*y+p*g)*C,e):null}(Ve,r)),e.queue.writeBuffer(t,64,n)}}var De="const PI : f32 = 3.141592653589793;\n\nfn rotateX(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    1, 0, 0,\n    0, c, s,\n    0, -s, c,\n  );\n}\n\nfn rotateY(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, 0, -s,\n    0, 1, 0,\n    s, 0, c,\n  );\n}\n\nfn rotateZ(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, s, 0,\n    -s, c, 0,\n    0, 0, 1,\n  );\n}\n";class Oe{constructor({device:e,format:t}){this.device=e,this.descriptor={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},this.effects=(e=>{const t=new Float32Array([0,0,0,.3,.5,.5]),n=e.createBuffer({size:32,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set(t),n.unmap(),{buffer:n,edges:{get color(){return t.subarray(0,3)},set color(r){t.set(r),e.queue.writeBuffer(n,0,t,0,3)},get intensity(){return t[3]},set intensity(r){t[3]=r,e.queue.writeBuffer(n,12,t,3,1)},get depthScale(){return t[4]},set depthScale(r){t[4]=r,e.queue.writeBuffer(n,16,t,4,1)},get normalScale(){return t[5]},set normalScale(r){t[5]=r,e.queue.writeBuffer(n,20,t,5,1)}}}})(e),this.geometry=(e=>{const t=e.createBuffer({size:18*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(t.getMappedRange()).set([-1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1]),t.unmap(),t})(e),this.pipeline=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({code:"\n@vertex\nfn main(@location(0) position : vec4<f32>) -> @builtin(position) vec4<f32> {\n  return position;\n}\n"}),entryPoint:"main",buffers:[{arrayStride:3*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]}]},fragment:{module:e.createShaderModule({code:"\nstruct Edges {\n  color : vec3<f32>,\n  intensity : f32,\n  depthScale : f32,\n  normalScale : f32,\n}\n\nstruct Effects {\n  edges : Edges,\n}\n\n@group(0) @binding(0) var<uniform> effects : Effects;\n@group(0) @binding(1) var colorTexture : texture_2d<f32>;\n@group(0) @binding(2) var normalTexture : texture_2d<f32>;\n@group(0) @binding(3) var positionTexture : texture_2d<f32>;\n\nconst offset : vec3<i32> = vec3<i32>(1, 1, 0);\n\nfn edgesDepth(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : f32 = textureLoad(positionTexture, pixel, 0).z;\n  var pixelLeft : f32 = textureLoad(positionTexture, pixel - offset.xz, 0).z;\n  var pixelRight : f32 = textureLoad(positionTexture, pixel + offset.xz, 0).z;\n  var pixelUp : f32 = textureLoad(positionTexture, pixel + offset.zy, 0).z;\n  var pixelDown : f32 = textureLoad(positionTexture, pixel - offset.zy, 0).z;\n  return (\n    abs(pixelLeft    - pixelCenter) \n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter) \n  ) * effects.edges.depthScale;\n}\n\nfn edgesNormal(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : vec3<f32> = textureLoad(normalTexture, pixel, 0).xyz;\n  var pixelLeft : vec3<f32> = textureLoad(normalTexture, pixel - offset.xz, 0).xyz;\n  var pixelRight : vec3<f32> = textureLoad(normalTexture, pixel + offset.xz, 0).xyz;\n  var pixelUp : vec3<f32> = textureLoad(normalTexture, pixel + offset.zy, 0).xyz;\n  var pixelDown : vec3<f32> = textureLoad(normalTexture, pixel - offset.zy, 0).xyz;\n  var edge : vec3<f32> = (\n    abs(pixelLeft    - pixelCenter)\n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter)\n  );\n  return (edge.x + edge.y + edge.z) * effects.edges.normalScale;\n}\n\n@fragment\nfn main(@builtin(position) uv : vec4<f32>) -> @location(0) vec4<f32> {\n  var pixel : vec2<i32> = vec2<i32>(floor(uv.xy));\n  var color : vec3<f32> = textureLoad(colorTexture, pixel, 0).xyz;\n  if (effects.edges.intensity != 0) {\n    color = mix(color, effects.edges.color, clamp(max(edgesDepth(pixel), edgesNormal(pixel)), 0, 1) * effects.edges.intensity);\n  }\n  return vec4<f32>(color, 1);\n}\n"}),entryPoint:"main",targets:[{format:t}]},primitive:{topology:"triangle-list"}})}bindTextures({color:e,normal:t,position:n}){const{device:r,effects:o,pipeline:i}=this;this.bindings=r.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:o.buffer}},{binding:1,resource:e},{binding:2,resource:t},{binding:3,resource:n}]})}render(e,t){const{bindings:n,descriptor:r,geometry:o,pipeline:i}=this;r.colorAttachments[0].view=t;const s=e.beginRenderPass(r);s.setPipeline(i),s.setBindGroup(0,n),s.setVertexBuffer(0,o),s.draw(6,1,0,0),s.end()}}const Ye=`\nstruct VertexInput {\n  @location(0) position : vec3<f32>,\n  @location(1) uv : vec2<f32>,\n  @location(2) face : vec4<f32>,\n}\n\nstruct VertexOutput {\n  @builtin(position) position : vec4<f32>,\n  @location(0) viewPosition: vec3<f32>,\n  @location(1) normal: vec3<f32>,\n  @location(2) uv: vec2<f32>,\n  @location(3) @interpolate(flat) texture: i32,\n}\n\nstruct Camera {\n  projection : mat4x4<f32>,\n  view : mat4x4<f32>,\n  normal : mat3x3<f32>,\n}\n\n@group(0) @binding(0) var<uniform> camera : Camera;\n\n${De}\n\nconst faceNormal : vec3<f32> = vec3<f32>(0, 0, 1);\n\n@vertex\nfn main(voxel : VertexInput) -> VertexOutput {\n  var rotation : mat3x3<f32>;\n  switch (i32(voxel.face.w % 6)) {\n    default {\n      rotation = mat3x3<f32>(\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n      );\n    }\n    case 1 {\n      rotation = rotateX(PI * -0.5);\n    }\n    case 2 {\n      rotation = rotateX(PI * 0.5);\n    }\n    case 3 {\n      rotation = rotateY(PI * -0.5);\n    }\n    case 4 {\n      rotation = rotateY(PI * 0.5);\n    }\n    case 5 {\n      rotation = rotateY(PI);\n    }\n  }\n  var mvPosition : vec4<f32> = camera.view * vec4<f32>(rotation * voxel.position + voxel.face.xyz, 1);\n  var out : VertexOutput;\n  out.position = camera.projection * mvPosition;\n  out.viewPosition = -mvPosition.xyz;\n  out.normal = normalize(camera.normal * rotation * faceNormal);\n  out.uv = voxel.uv;\n  out.texture = i32(floor(voxel.face.w / 6));\n  return out;\n}\n`,je=e=>{const t=e.createBuffer({size:30*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(t.getMappedRange()).set([-.5,-.5,.5,0,1,.5,-.5,.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,-.5,.5,0,1]),t.unmap(),t};class We{constructor({adapter:e,device:t,atlas:n=null,camera:r=null,canvas:o=null,samples:i=4}){const s=navigator.gpu.getPreferredCanvasFormat(e);this.atlas=n||new Ie({device:t}),this.camera=r||new qe({device:t}),this.canvas=o||document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context=this.canvas.getContext("webgpu"),this.context.configure({alphaMode:"opaque",device:t,format:s}),this.device=t,this.samples=i;const a=t.createRenderPipeline({layout:"auto",vertex:{module:t.createShaderModule({code:Ye}),entryPoint:"main",buffers:[{arrayStride:5*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:3*Float32Array.BYTES_PER_ELEMENT,format:"float32x2"}]},{arrayStride:4*Float32Array.BYTES_PER_ELEMENT,stepMode:"instance",attributes:[{shaderLocation:2,offset:0,format:"float32x4"}]}]},fragment:{module:t.createShaderModule({code:"\nstruct FragmentInput {\n  @location(0) position : vec3<f32>,\n  @location(1) normal : vec3<f32>,\n  @location(2) uv : vec2<f32>,\n  @location(3) @interpolate(flat) texture : i32,\n}\n\nstruct FragmentOutput {\n  @location(0) color : vec4<f32>,\n  @location(1) normal : vec4<f32>,\n  @location(2) position : vec4<f32>,\n}\n\n@group(0) @binding(1) var atlas : texture_2d_array<f32>;\n@group(0) @binding(2) var atlasSampler : sampler;\n\n@fragment\nfn main(face : FragmentInput) -> FragmentOutput {\n  var output : FragmentOutput;\n  output.color = textureSample(atlas, atlasSampler, face.uv, face.texture);\n  output.normal = vec4<f32>(normalize(face.normal), 1);\n  output.position = vec4<f32>(face.position, 1);\n  return output;\n}\n"}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"},multisample:{count:this.samples}});this.rendering={bindings:t.createBindGroup({layout:a.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.camera.buffer}},{binding:1,resource:this.atlas.texture.createView()},{binding:2,resource:t.createSampler()}]}),descriptor:{colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},geometry:je(t),pipeline:a},this.postprocessing=new Oe({device:t,format:s})}render(e,t){const{context:n,postprocessing:r,rendering:{bindings:o,descriptor:i,geometry:s,pipeline:a}}=this,c=e.beginRenderPass(i);c.setPipeline(a),c.setBindGroup(0,o),c.setVertexBuffer(0,s),t.chunks.forEach((({faces:e})=>{c.setVertexBuffer(1,e,16),c.drawIndirect(e,0)})),c.end(),r.render(e,n.getCurrentTexture().createView())}setClearColor(e,t,n){const{rendering:{descriptor:{colorAttachments:[{clearValue:r}]}}}=this;r.r=e,r.g=t,r.b=n}setSize(e,t){const{camera:n,canvas:r,device:o,postprocessing:i,rendering:s,samples:a}=this,c=window.devicePixelRatio||1,u=[Math.floor(e*c),Math.floor(t*c)];r.width=u[0],r.height=u[1],r.style.width=`${e}px`,r.style.height=`${t}px`,n.aspect=e/t,n.updateProjection();const l=(e,t,n,r)=>(e[t]&&e[t].destroy(),e[t]=o.createTexture({size:u,sampleCount:n,format:r,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),e[t].createView());s.descriptor.colorAttachments[0].view=l(s,"colorTexture",a,"rgba8unorm"),s.descriptor.colorAttachments[0].resolveTarget=l(s,"colorTarget",1,"rgba8unorm"),s.descriptor.colorAttachments[1].view=l(s,"normalTexture",a,"rgba16float"),s.descriptor.colorAttachments[1].resolveTarget=l(s,"normalTarget",1,"rgba16float"),s.descriptor.colorAttachments[2].view=l(s,"positionTexture",a,"rgba16float"),s.descriptor.colorAttachments[2].resolveTarget=l(s,"positionTarget",1,"rgba16float"),s.descriptor.depthStencilAttachment.view=l(s,"depthTexture",a,"depth24plus"),i.bindTextures({color:s.colorTarget.createView(),normal:s.normalTarget.createView(),position:s.positionTarget.createView()})}}var Xe=({chunkSize:e})=>`\nconst chunkSize : i32 = ${e};\n\nfn getVoxel(pos : vec3<i32>) -> u32 {\n  return u32(pos.z * chunkSize * chunkSize + pos.y * chunkSize + pos.x);\n}\n`;const Ze=({chunkSize:e})=>`\nstruct Faces {\n  vertexCount : u32,\n  instanceCount : atomic<u32>,\n  firstVertex : u32,\n  firstInstance : u32,\n  data : array<f32>,\n}\n\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<storage, read_write> faces : Faces;\n@group(0) @binding(2) var<storage, read> voxels : array<f32>;\n@group(0) @binding(3) var<storage, read> voxels_north : array<f32>;\n@group(0) @binding(4) var<storage, read> voxels_top : array<f32>;\n@group(0) @binding(5) var<storage, read> voxels_bottom : array<f32>;\n@group(0) @binding(6) var<storage, read> voxels_west : array<f32>;\n@group(0) @binding(7) var<storage, read> voxels_east : array<f32>;\n@group(0) @binding(8) var<storage, read> voxels_south : array<f32>;\n\n${Xe({chunkSize:e})}\n\nfn isAir(pos : vec3<i32>) -> bool {\n  if (pos.x == -1) {\n    return voxels_west[getVoxel(vec3<i32>(chunkSize - 1, pos.y, pos.z))] == 0;\n  }\n  if (pos.x == chunkSize) {\n    return voxels_east[getVoxel(vec3<i32>(0, pos.y, pos.z))] == 0.0;\n  }\n  if (pos.y == -1) {\n    return voxels_bottom[getVoxel(vec3<i32>(pos.x, chunkSize - 1, pos.z))] == 0;\n  }\n  if (pos.y == chunkSize) {\n    return voxels_top[getVoxel(vec3<i32>(pos.x, 0, pos.z))] == 0;\n  }\n  if (pos.z == -1) {\n    return voxels_south[getVoxel(vec3<i32>(pos.x, pos.y, chunkSize - 1))] == 0;\n  }\n  if (pos.z == chunkSize) {\n    return voxels_north[getVoxel(vec3<i32>(pos.x, pos.y, 0))] == 0;\n  }\n  return voxels[getVoxel(pos)] == 0; \n}\n\nfn pushFace(pos : vec3<i32>, face : i32, texture : i32) {\n  var offset : u32 = atomicAdd(&(faces.instanceCount), 1) * 4;\n  faces.data[offset] = f32(pos.x) + 0.5;\n  faces.data[offset + 1] = f32(pos.y) + 0.5;\n  faces.data[offset + 2] = f32(pos.z) + 0.5;\n  faces.data[offset + 3] = f32(texture * 6 + face);\n}\n\nconst faceNormals = array<vec3<i32>, 6>(\n  vec3<i32>(0, 0, 1),\n  vec3<i32>(0, 1, 0),\n  vec3<i32>(0, -1, 0),\n  vec3<i32>(-1, 0, 0),\n  vec3<i32>(1, 0, 0),\n  vec3<i32>(0, 0, -1),\n);\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  var value : f32 = voxels[getVoxel(pos)];\n  if (value != 0) {\n    var texture : i32 = i32(floor(value) - 1);\n    for (var face : i32 = 0; face < 6; face++) {\n      var npos : vec3<i32> = pos + faceNormals[face];\n      if (isAir(npos)) {\n        pushFace(chunk + pos, face, texture);\n      }\n    }\n  }\n}\n`;class He{constructor({chunks:e,volume:t}){this.pipeline=t.device.createComputePipeline({layout:"auto",compute:{module:t.device.createShaderModule({code:Ze({chunkSize:t.chunkSize})}),entryPoint:"main"}});const n={x:0,y:0,z:0},r=(r,o)=>{if(n.x=r.x+o.x,n.y=r.y+o.y,n.z=r.z+o.z,n.x<0||n.x>=e.x||n.y<0||n.y>=e.y||n.z<0||n.z>=e.z)return t.edge;const i=n.z*e.x*e.y+n.y*e.x+n.x;return t.chunks[i].voxels},o=[{x:0,y:0,z:1},{x:0,y:1,z:0},{x:0,y:-1,z:0},{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:0,z:-1}];this.bindings=t.chunks.map((e=>({bindings:t.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e.position,e.faces,e.voxels,...o.map((t=>r(e.chunk,t)))].map(((e,t)=>({binding:t,resource:{buffer:e}})))}),chunk:e}))),this.workgroups=Math.ceil(t.chunkSize/4)}compute(e){const{bindings:t,pipeline:n,workgroups:r}=this;t.forEach((({bindings:t,chunk:o})=>{o.resetInstanceCount(e);const i=e.beginComputePass();i.setPipeline(n),i.setBindGroup(0,t),i.dispatchWorkgroups(r,r,r),i.end()}))}}const Ke=({chunkSize:e,source:t,triangles:n})=>`\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<uniform> transform : mat4x4<f32>;\n@group(0) @binding(2) var<storage, read> indices : array<array<u32, 3>>;\n@group(0) @binding(3) var<storage, read> vertices : array<array<f32, 3>>;\n@group(0) @binding(4) var<storage, read_write> voxels : array<f32>;\n\n${Xe({chunkSize:e})}\n\nstruct AxisTest {\n  ann : vec3<f32>,\n  fnn : vec3<f32>,\n  aa : i32,\n  bb : i32,\n}\n\nfn intersects(triangle : array<vec3<f32>, 3>, voxel : vec3<f32>) -> bool {\n  var v0 : vec3<f32> = triangle[0] - voxel;\n  var v1 : vec3<f32> = triangle[1] - voxel;\n  var v2 : vec3<f32> = triangle[2] - voxel;\n\n  var f0 : vec3<f32> = v1 - v0;\n  var f1 : vec3<f32> = v2 - v1;\n  var f2 : vec3<f32> = v0 - v2;\n\n  var axis_test = array<AxisTest, 9>(\n    AxisTest(vec3<f32>(0, -f0.z, f0.y), f0, 1, 2),\n    AxisTest(vec3<f32>(0, -f1.z, f1.y), f1, 1, 2),\n    AxisTest(vec3<f32>(0, -f2.z, f2.y), f2, 1, 2),\n    AxisTest(vec3<f32>(f0.z, 0, -f0.x), f0, 0, 2),\n    AxisTest(vec3<f32>(f1.z, 0, -f1.x), f1, 0, 2),\n    AxisTest(vec3<f32>(f2.z, 0, -f2.x), f2, 0, 2),\n    AxisTest(vec3<f32>(-f0.y, f0.x, 0), f0, 0, 1),\n    AxisTest(vec3<f32>(-f1.y, f1.x, 0), f1, 0, 1),\n    AxisTest(vec3<f32>(-f2.y, f2.x, 0), f2, 0, 1),\n  );\n\n  for (var i : i32 = 0; i < 9; i++) {\n    var t : AxisTest = axis_test[i];\n    var p0 : f32 = dot(v0, t.ann);\n    var p1 : f32 = dot(v1, t.ann);\n    var p2 : f32 = dot(v2, t.ann);\n    var r : f32 = 0.5 * abs(t.fnn[t.bb]) + 0.5 * abs(t.fnn[t.aa]);\n    if (max(-max(p0, max(p1, p2)), min(p0, min(p1, p2))) > r) {\n      return false;\n    }\n  }\n\n  if (max(v0.x, max(v1.x, v2.x)) < -0.5 || min(v0.x, min(v1.x, v2.x)) > 0.5) {\n    return false;\n  }\n  if (max(v0.y, max(v1.y, v2.y)) < -0.5 || min(v0.y, min(v1.y, v2.y)) > 0.5) {\n    return false;\n  }\n  if (max(v0.z, max(v1.z, v2.z)) < -0.5 || min(v0.z, min(v1.z, v2.z)) > 0.5) {\n    return false;\n  }\n\n  var planeNorm : vec3<f32> = normalize(cross(f1, f0));\n  var planeConst : f32 = dot(planeNorm, triangle[0]);\n  var r : f32 = 0.5 * abs(planeNorm.x) + 0.5 * abs(planeNorm.y) + 0.5 * abs(planeNorm.z);\n  var s : f32 = abs(dot(planeNorm, voxel) - planeConst);\n  return s <= r;\n}\n\nfn getVertex(index : u32) -> vec3<f32> {\n  var vertex : vec4<f32> = vec4<f32>(vertices[index][0], vertices[index][1], vertices[index][2], 1);\n  return (transform * vertex).xyz - vec3<f32>(chunk);\n}\n\nconst triangles : u32 = ${n};\n\n${t}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : u32 = GlobalInvocationID.x;\n  if (id >= triangles) {\n    return;\n  }\n\n  var triangle = array<vec3<f32>, 3>(\n    getVertex(indices[id][0]),\n    getVertex(indices[id][1]),\n    getVertex(indices[id][2]),\n  );\n\n  var tmin : vec3<i32> = vec3<i32>(chunkSize);\n  var tmax : vec3<i32> = vec3<i32>(0);\n  for (var i : i32 = 0; i < 3; i++) {\n    var p = vec3<i32>(triangle[i]);\n    tmin = min(tmin, p);\n    tmax = max(tmax, p);\n  }\n  tmin = clamp(tmin, vec3<i32>(0), vec3<i32>(chunkSize - 1));\n  tmax = clamp(tmax, vec3<i32>(0), vec3<i32>(chunkSize - 1));\n\n  for (var z : i32 = tmin.z; z <= tmax.z; z++) {\n    for (var y : i32 = tmin.y; y <= tmax.y; y++) {\n      for (var x : i32 = tmin.x; x <= tmax.x; x++) {\n        if (intersects(triangle, vec3<f32>(f32(x) + 0.5, f32(y) + 0.5, f32(z) + 0.5))) {\n          var pos : vec3<i32> = vec3<i32>(x, y, z);\n          voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n        }\n      }\n    }\n  }\n}\n`;class Je{constructor({device:e,position:t=new Float32Array([0,0,0]),rotation:n=new Float32Array([0,0,0,1]),scale:r=new Float32Array([1,1,1])}){this.device=e,this.data=Te(),this.buffer=e.createBuffer({mappedAtCreation:!0,size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),_e(this.data,n,t,r),new Float32Array(this.buffer.getMappedRange()).set(this.data),this.buffer.unmap()}destroy(){const{buffer:e}=this;e.destroy()}set(e,t,n){const{device:r,buffer:o,data:i}=this;_e(i,t,e,n),r.queue.writeBuffer(o,0,i)}}class Qe{constructor({geometry:e,volume:t}){const n=e.indices.length/3;this.pipeline=t.device.createComputePipeline({layout:"auto",compute:{module:t.device.createShaderModule({code:Ke({chunkSize:t.chunkSize,source:e.source||"\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  return 1;\n}\n",triangles:n})}),entryPoint:"main"}}),this.transform=new Je({device:t.device,position:e.position,rotation:e.rotation,scale:e.scale}),this.indices=t.device.createBuffer({mappedAtCreation:!0,size:e.indices.byteLength,usage:GPUBufferUsage.STORAGE}),new Uint32Array(this.indices.getMappedRange()).set(e.indices),this.indices.unmap(),this.vertices=t.device.createBuffer({mappedAtCreation:!0,size:e.vertices.byteLength,usage:GPUBufferUsage.STORAGE}),new Float32Array(this.vertices.getMappedRange()).set(e.vertices),this.vertices.unmap(),this.bindings=t.chunks.map((({position:e,voxels:n})=>({bindings:t.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e,this.transform.buffer,this.indices,this.vertices,n].map(((e,t)=>({binding:t,resource:{buffer:e}})))}),clearChunk:e=>e.clearBuffer(n)}))),this.workgroups=Math.ceil(n/64)}compute(e){const{bindings:t,pipeline:n,workgroups:r}=this;t.forEach((({bindings:t,clearChunk:o})=>{o(e);const i=e.beginComputePass();i.setPipeline(n),i.setBindGroup(0,t),i.dispatchWorkgroups(r),i.end()}))}destroy(){const{transform:e,indices:t,vertices:n}=this;e.destroy(),t.destroy(),n.destroy()}}const et=({chunkSize:e,width:t,height:n,depth:r,source:o})=>`\n@group(0) @binding(0) var<uniform> time : f32;\n@group(0) @binding(1) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(2) var<storage, read_write> voxels : array<f32>;\n\n${Le}\n${De}\nfn sdBox(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = abs(p) - r;\n  return length(max(q, vec3<f32>(0))) + min(max(q.x, max(q.y, q.z)), 0);\n}\n\nfn sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = vec3<f32>(p.x, clamp(p.y, -r.y + r.x, r.y - r.x), p.y);\n  return length(q) - q.x;\n}\n\nfn sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var k0 : f32 = length(p / r);\n  var k1 : f32 = length(p / (r * r));\n  return k0 * (k0 - 1.0) / k1;\n}\n\nfn sdSphere(p : vec3<f32>, r : f32) -> f32 {\n  return length(p) - r;\n}\n\nfn sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32 {\n  var q : vec2<f32> = vec2<f32>(length(p.xz) - r.x, p.y);\n  return length(q) - r.y;\n}\n\nfn opUnion(d1 : f32, d2 : f32) -> f32 {\n  return min(d1, d2);\n}\n\nfn opSubstraction(d1 : f32, d2 : f32) -> f32 {\n  return max(d1, -d2);\n}\n\nfn opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 + 0.5 * (d2 - d1) / k, 0, 1);\n  return mix(d2, d1, h) + k * h * (1 - h);\n}\n\nfn opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 - 0.5 * (d2 + d1) / k, 0, 1);\n  return mix(d1, -d2, h) + k * h * (1 - h);\n}\n\n${Xe({chunkSize:e})}\n\nstruct Volume {\n  center : vec3<f32>,\n  size : vec3<f32>,\n}\n\nconst volume : Volume = Volume(\n  vec3<f32>(${.5*t}, ${.5*n}, ${.5*r}),\n  vec3<f32>(${t}, ${n}, ${r})\n);\n\n${o}\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n}\n`;class tt{constructor({source:e,volume:t}){this.pipeline=t.device.createComputePipeline({layout:"auto",compute:{module:t.device.createShaderModule({code:et({chunkSize:t.chunkSize,width:t.width,height:t.height,depth:t.depth,source:e})}),entryPoint:"main"}}),this.bindings=t.chunks.map((({position:e,voxels:n})=>t.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[t.time.buffer,e,n].map(((e,t)=>({binding:t,resource:{buffer:e}})))}))),this.workgroups=Math.ceil(t.chunkSize/4)}compute(e){const{bindings:t,pipeline:n,workgroups:r}=this;t.forEach((t=>{const o=e.beginComputePass();o.setPipeline(n),o.setBindGroup(0,t),o.dispatchWorkgroups(r,r,r),o.end()}))}}class nt{constructor({device:e,chunk:t,chunkSize:n}){this.chunk=t,this.faces=e.createBuffer({mappedAtCreation:!0,size:4*Uint32Array.BYTES_PER_ELEMENT+6*Math.ceil(n*n*n*.5)*4*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX}),new Uint32Array(this.faces.getMappedRange())[0]=6,this.faces.unmap(),this.position=e.createBuffer({mappedAtCreation:!0,size:3*Int32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM}),new Int32Array(this.position.getMappedRange()).set([t.x*n,t.y*n,t.z*n]),this.position.unmap(),this.voxels=nt.createVoxelsBuffer({device:e,chunkSize:n})}destroy(){const{faces:e,position:t,voxels:n}=this;e.destroy(),t.destroy(),n.destroy()}resetInstanceCount(e){const{faces:t}=this;e.clearBuffer(t,4,4)}static createVoxelsBuffer({device:e,chunkSize:t}){return e.createBuffer({size:t*t*t*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE})}}class rt{constructor({device:e}){this.device=e,this.data=new Float32Array(1),this.buffer=e.createBuffer({size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM})}destroy(){const{buffer:e}=this;e.destroy()}set(e){const{device:t,buffer:n,data:r}=this;r[0]=e,t.queue.writeBuffer(n,0,r)}}class ot{constructor({chunkSize:e=100,device:t,width:n,height:r,depth:o}){this.chunkSize=e,this.device=t,this.width=n,this.height=r,this.depth=o;const i={x:Math.ceil(n/e),y:Math.ceil(r/e),z:Math.ceil(o/e)};this.chunks=[];for(let n=0;n<i.z;n++)for(let r=0;r<i.y;r++)for(let o=0;o<i.x;o++)this.chunks.push(new nt({device:t,chunk:{x:o,y:r,z:n},chunkSize:e}));this.edge=nt.createVoxelsBuffer({device:t,chunkSize:e}),this.mesher=new He({chunks:i,volume:this}),this.time=new rt({device:t})}compute(e,t){const{mesher:n,time:r,voxelizer:o}=this;r.set(t),o.compute(e),n.compute(e)}destroy(){const{chunks:e,edge:t,time:n,voxelizer:r}=this;e.forEach((e=>e.destroy())),t.destroy(),n.destroy(),r&&r.destroy&&r.destroy()}setScene(e){const{voxelizer:t}=this;t&&t.destroy&&t.destroy(),e.geometry?this.voxelizer=new Qe({geometry:e.geometry,volume:this}):e.source&&(this.voxelizer=new tt({source:e.source,volume:this}))}}class it{constructor(e){this.look={state:Ue(.5*Math.PI,0),target:Ue(.5*Math.PI,0)},this.pointer={movement:Be(),position:Be()},this.zoom={state:.75,target:.75},this.target=e,this.updateBounds(),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onMouseWheel=this.onMouseWheel.bind(this),e.addEventListener("mousedown",this.onMouseDown,!1),window.addEventListener("mousemove",this.onMouseMove,!1),window.addEventListener("mouseup",this.onMouseUp,!1),window.addEventListener("wheel",this.onMouseWheel,{passive:!1})}destroy(){this.target.removeEventListener("mousedown",this.onMouseDown),window.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("mouseup",this.onMouseUp),window.removeEventListener("wheel",this.onMouseWheel)}onMouseDown({button:e}){const{pointer:t}=this;t.isDown=0===e}onMouseMove({clientX:e,clientY:t,movementX:n,movementY:r}){const{sensitivity:o}=it,{bounds:i,pointer:{movement:s,position:a}}=this;s[0]-=n*o.look,s[1]-=r*o.look,Ge(a,(e-i.x)/i.width*2-1,-(t-i.y)/i.height*2+1)}onMouseUp({button:e}){const{pointer:t}=this;0===e&&(t.isDown=!1)}onMouseWheel(e){e.ctrlKey&&e.preventDefault();const{sensitivity:t,minZoom:n,zoomRange:r}=it,{zoom:o}=this,i=Math.min(Math.max((Math.log(o.target)-n)/r+e.deltaY*t.zoom,0),1);o.target=Math.exp(n+i*r)}update(e){const{minPhi:t,maxPhi:n}=it,{pointer:r,look:o,zoom:i}=this;r.isDown&&(o.target[1]+=r.movement[0],o.target[0]=Math.min(Math.max(o.target[0]+r.movement[1],t),n));const s=1-Math.exp(-10*e);!function(e,t,n,r){var o=t[0],i=t[1];e[0]=o+r*(n[0]-o),e[1]=i+r*(n[1]-i)}(o.state,o.state,o.target,s),i.state=i.state*(1-s)+i.target*s,Ge(r.movement,0,0)}updateBounds(){const{target:e}=this;this.bounds=e.getBoundingClientRect()}}function st(t){let n;return{c(){n=m("div"),b(n,"class","wrapper svelte-jszh57")},m(e,r){v(e,n,r),t[1](n)},p:e,i:e,o:e,d(e){e&&h(n),t[1](null)}}}function at(e,t,n){const r=e=>[parseInt(e.slice(1,3),16)/255,parseInt(e.slice(3,5),16)/255,parseInt(e.slice(5,7),16)/255];let o;return M((()=>{const e=new it(o),t=new We(te.gpu);o.appendChild(t.canvas),t.setClearColor(.1,.1,.1),t.setSize(window.innerWidth,window.innerHeight),t.setSize(e.bounds.width,e.bounds.height),window.addEventListener("resize",(()=>{e.updateBounds(),t.setSize(e.bounds.width,e.bounds.height)}),!1);const n=new ot({device:t.device,width:300,height:300,depth:300});Ae(t.camera.target,.5*n.width,.5*n.height,.5*n.depth);let i=performance.now()/1e3;const s=()=>{requestAnimationFrame(s);const r=performance.now()/1e3,o=r-i;i=r,e.update(o),t.camera.setOrbit(e.look.state[0],e.look.state[1],n.width*e.zoom.state);const a=t.device.createCommandEncoder();n.compute(a,r),t.render(a,n),t.device.queue.submit([a.finish()])};requestAnimationFrame(s);const a=[ee.subscribe((e=>t.atlas.compute(e))),te.clearColor.subscribe((e=>t.setClearColor(...r(e)))),te.effects.edges.color.subscribe((e=>{t.postprocessing.effects.edges.color=r(e)})),te.effects.edges.intensity.subscribe((e=>{t.postprocessing.effects.edges.intensity=e})),ne.subscribe((e=>n.setScene({source:e})))];return()=>{a.forEach((e=>e())),e.destroy(),n.destroy()}})),[o,function(e){_[e?"unshift":"push"]((()=>{o=e,n(0,o)}))}]}it.sensitivity={look:.003,zoom:3e-4},it.minPhi=1e-6,it.maxPhi=Math.PI-1e-6,it.minZoom=Math.log(.25),it.maxZoom=Math.log(1.5),it.zoomRange=it.maxZoom-it.minZoom;class ct extends K{constructor(e){super(),H(this,e,at,st,i,{})}}function ut(e){let t,n;return t=new fe({props:{$$slots:{viewport:[mt],editor:[ht]},$$scope:{ctx:e}}}),{c(){W(t.$$.fragment)},m(e,r){X(t,e,r),n=!0},p(e,n){const r={};20&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(O(t.$$.fragment,e),n=!0)},o(e){Y(t.$$.fragment,e),n=!1},d(e){Z(t,e)}}}function lt(t){let n;return{c(){n=m("div"),n.innerHTML='Sorry! This works only in <a href="https://www.google.com/chrome/canary/" rel="noopener noreferrer" target="_blank" class="svelte-4omflb">Chrome Canary</a>.',b(n,"class","canary svelte-4omflb")},m(e,t){v(e,n,t)},p:e,i:e,o:e,d(e){e&&h(n)}}}function ft(t){let n;return{c(){n=m("div"),n.textContent="Loading...",b(n,"class","loading svelte-4omflb")},m(e,t){v(e,n,t)},p:e,i:e,o:e,d(e){e&&h(n)}}}function pt(e){let t,n;return t=new ye({}),{c(){W(t.$$.fragment)},m(e,r){X(t,e,r),n=!0},i(e){n||(O(t.$$.fragment,e),n=!0)},o(e){Y(t.$$.fragment,e),n=!1},d(e){Z(t,e)}}}function dt(e){let t,n;return t=new me({}),{c(){W(t.$$.fragment)},m(e,r){X(t,e,r),n=!0},i(e){n||(O(t.$$.fragment,e),n=!0)},o(e){Y(t.$$.fragment,e),n=!1},d(e){Z(t,e)}}}function vt(e){let t,n;return t=new we({}),{c(){W(t.$$.fragment)},m(e,r){X(t,e,r),n=!0},i(e){n||(O(t.$$.fragment,e),n=!0)},o(e){Y(t.$$.fragment,e),n=!1},d(e){Z(t,e)}}}function ht(e){let t,n,r,o,i,s;t=new ke({});const a=[vt,dt,pt],c=[];function u(e,t){return"scene"===e[2]?0:"atlas"===e[2]?1:"rendering"===e[2]?2:-1}return~(r=u(e))&&(o=c[r]=a[r](e)),{c(){W(t.$$.fragment),n=g(),o&&o.c(),i=x("")},m(e,o){X(t,e,o),v(e,n,o),~r&&c[r].m(e,o),v(e,i,o),s=!0},p(e,t){let n=r;r=u(e),r!==n&&(o&&(q(),Y(c[n],1,1,(()=>{c[n]=null})),D()),~r?(o=c[r],o||(o=c[r]=a[r](e),o.c()),O(o,1),o.m(i.parentNode,i)):o=null)},i(e){s||(O(t.$$.fragment,e),O(o),s=!0)},o(e){Y(t.$$.fragment,e),Y(o),s=!1},d(e){Z(t,e),e&&h(n),~r&&c[r].d(e),e&&h(i)}}}function mt(t){let n,r;return n=new ct({props:{slot:"viewport"}}),{c(){W(n.$$.fragment)},m(e,t){X(n,e,t),r=!0},p:e,i(e){r||(O(n.$$.fragment,e),r=!0)},o(e){Y(n.$$.fragment,e),r=!1},d(e){Z(n,e)}}}function xt(e){let t,n,r,o,i,s,a;const c=[ft,lt,ut],u=[];function l(e,t){return e[1]?0:e[0]?1:2}return t=l(e),n=u[t]=c[t](e),{c(){n.c(),r=g(),o=m("div"),o.innerHTML='voxeltoy - <a href="https://github.com/danielesteban/voxeltoy" rel="noopener noreferrer" target="_blank" class="svelte-4omflb">view source</a><br/> \n  <a href="https://dani.gatunes.com" rel="noopener noreferrer" target="_blank" class="svelte-4omflb">dani@gatunes</a> © 2022',i=g(),s=m("a"),s.textContent="♥ Become a sponsor",b(o,"class","info svelte-4omflb"),b(s,"class","ribbon svelte-4omflb"),b(s,"href","https://github.com/sponsors/danielesteban"),b(s,"data-ribbon","♥ Become a sponsor"),b(s,"rel","noopener noreferrer"),b(s,"target","_blank")},m(e,n){u[t].m(e,n),v(e,r,n),v(e,o,n),v(e,i,n),v(e,s,n),a=!0},p(e,[o]){let i=t;t=l(e),t===i?u[t].p(e,o):(q(),Y(u[i],1,1,(()=>{u[i]=null})),D(),n=u[t],n?n.p(e,o):(n=u[t]=c[t](e),n.c()),O(n,1),n.m(r.parentNode,r))},i(e){a||(O(n),a=!0)},o(e){Y(n),a=!1},d(e){u[t].d(e),e&&h(r),e&&h(o),e&&h(i),e&&h(s)}}}function gt(e,t,n){let r;a(e,re,(e=>n(2,r=e)));let o=!1,i=!0;return Promise.all([(async()=>{if(!navigator.gpu||!navigator.gpu.getPreferredCanvasFormat)throw new Error("WebGPU");const e=await navigator.gpu.requestAdapter(),t=await e.requestDevice();return{adapter:e,device:t}})(),new Promise((e=>{require.config({paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs"}}),require(["vs/editor/editor.main"],e)}))]).then((([e])=>{te.gpu=e})).catch((e=>{console.error(e),n(0,o=!0)})).finally((()=>{n(1,i=!1)})),[o,i,r]}new class extends K{constructor(e){super(),H(this,e,gt,xt,i,{})}}({target:document.body})}();
