!function(){"use strict";function e(){}function n(e){return e()}function t(){return Object.create(null)}function r(e){e.forEach(n)}function o(e){return"function"==typeof e}function i(e,n){return e!=e?n==n:e!==n||e&&"object"==typeof e||"function"==typeof e}function a(n,t,r){n.$$.on_destroy.push(function(n,...t){if(null==n)return e;const r=n.subscribe(...t);return r.unsubscribe?()=>r.unsubscribe():r}(t,r))}function s(e,n){e.appendChild(n)}function c(e,n,t){e.insertBefore(n,t||null)}function u(e){e.parentNode.removeChild(e)}function f(e){return document.createElement(e)}function l(){return e=" ",document.createTextNode(e);var e}function p(e,n,t,r){return e.addEventListener(n,t,r),()=>e.removeEventListener(n,t,r)}function d(e,n,t){null==t?e.removeAttribute(n):e.getAttribute(n)!==t&&e.setAttribute(n,t)}function v(e,n,t){e.classList[t?"add":"remove"](n)}let h;function m(e){h=e}function x(e){(function(){if(!h)throw new Error("Function called outside component initialization");return h})().$$.on_mount.push(e)}const g=[],y=[],b=[],z=[],w=Promise.resolve();let k=!1;function S(e){b.push(e)}const E=new Set;let M=0;function T(){const e=h;do{for(;M<g.length;){const e=g[M];M++,m(e),_(e.$$)}for(m(null),g.length=0,M=0;y.length;)y.pop()();for(let e=0;e<b.length;e+=1){const n=b[e];E.has(n)||(E.add(n),n())}b.length=0}while(g.length);for(;z.length;)z.pop()();k=!1,E.clear(),m(e)}function _(e){if(null!==e.fragment){e.update(),r(e.before_update);const n=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,n),e.after_update.forEach(S)}}const $=new Set;let P;function B(){P={r:0,c:[],p:P}}function A(){P.r||r(P.c),P=P.p}function C(e,n){e&&e.i&&($.delete(e),e.i(n))}function U(e,n,t,r){if(e&&e.o){if($.has(e))return;$.add(e),P.c.push((()=>{$.delete(e),r&&(t&&e.d(1),r())})),e.o(n)}else r&&r()}function G(e){e&&e.c()}function R(e,t,i,a){const{fragment:s,on_mount:c,on_destroy:u,after_update:f}=e.$$;s&&s.m(t,i),a||S((()=>{const t=c.map(n).filter(o);u?u.push(...t):r(t),e.$$.on_mount=[]})),f.forEach(S)}function L(e,n){const t=e.$$;null!==t.fragment&&(r(t.on_destroy),t.fragment&&t.fragment.d(n),t.on_destroy=t.fragment=null,t.ctx=[])}function V(e,n){-1===e.$$.dirty[0]&&(g.push(e),k||(k=!0,w.then(T)),e.$$.dirty.fill(0)),e.$$.dirty[n/31|0]|=1<<n%31}function I(n,o,i,a,s,c,f,l=[-1]){const p=h;m(n);const d=n.$$={fragment:null,ctx:null,props:c,update:e,not_equal:s,bound:t(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(o.context||(p?p.$$.context:[])),callbacks:t(),dirty:l,skip_bound:!1,root:o.target||p.$$.root};f&&f(d.root);let v=!1;if(d.ctx=i?i(n,o.props||{},((e,t,...r)=>{const o=r.length?r[0]:t;return d.ctx&&s(d.ctx[e],d.ctx[e]=o)&&(!d.skip_bound&&d.bound[e]&&d.bound[e](o),v&&V(n,e)),t})):[],d.update(),v=!0,r(d.before_update),d.fragment=!!a&&a(d.ctx),o.target){if(o.hydrate){const e=function(e){return Array.from(e.childNodes)}(o.target);d.fragment&&d.fragment.l(e),e.forEach(u)}else d.fragment&&d.fragment.c();o.intro&&C(n.$$.fragment),R(n,o.target,o.anchor,o.customElement),T()}m(p)}class F{$destroy(){L(this,1),this.$destroy=e}$on(e,n){const t=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return t.push(n),()=>{const e=t.indexOf(n);-1!==e&&t.splice(e,1)}}$set(e){var n;this.$$set&&(n=e,0!==Object.keys(n).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const N=[];function q(n,t=e){let r;const o=new Set;function a(e){if(i(n,e)&&(n=e,r)){const e=!N.length;for(const e of o)e[1](),N.push(e,n);if(e){for(let e=0;e<N.length;e+=2)N[e][0](N[e+1]);N.length=0}}}return{set:a,update:function(e){a(e(n))},subscribe:function(i,s=e){const c=[i,s];return o.add(c),1===o.size&&(r=t(a)||e),i(n),()=>{o.delete(c),0===o.size&&(r(),r=null)}}}}const D=q("// VoxelToy\n\n// SDF primitives\n// sdBox(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32\n// sdSphere(p : vec3<f32>, r : f32) -> f32\n// sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32\n\n// SDF operations\n// opUnion(d1 : f32, d2 : f32) -> f32\n// opSubstraction(d1 : f32, d2 : f32) -> f32\n// opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32\n// opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32\n\n// Noise functions\n// noise3(p: vec3<f32>) -> f32\n// simplexNoise3(v: vec3<f32>) -> f32\n\n// Rotation helpers\n// rotateX(rad : f32) -> mat3x3<f32>\n// rotateY(rad : f32) -> mat3x3<f32>\n// rotateZ(rad : f32) -> mat3x3<f32>\n\n// Variables\n// time : f32\n// volume.size : vec3<f32>\n// volume.center : vec3<f32>\n\nfn distanceToScene(pos : vec3<f32>) -> f32 {\n  var origin : vec3<f32> = pos - volume.center;\n  var t : f32 = sin(time * 2);\n  var size : f32 = volume.size.x * (0.25 + t * 0.01);\n  return opSmoothUnion(\n    sdSphere(origin - vec3<f32>(size * (0.6 * t * -1), size * 0.2 * t * -1, 0), size),\n    sdSphere(origin - vec3<f32>(size * (0.6 * t), size * 0.2 * t, 0), size),\n    100\n  );\n}\n\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  if (distanceToScene(pos) > 0.01) {\n    return 0;\n  }\n  return 1 + abs(simplexNoise3(pos * 0.01)) * 254;\n}\n"),O=q("scene");function Y(n){let t;return{c(){t=f("div"),t.textContent="Atlas shader editor coming in the next version!",d(t,"class","wip svelte-oi957m")},m(e,n){c(e,t,n)},p:e,i:e,o:e,d(e){e&&u(t)}}}class j extends F{constructor(e){super(),I(this,e,null,Y,i,{})}}function W(n){let t;return{c(){t=f("div"),t.textContent="Rendering params editor coming in the next version!",d(t,"class","wip svelte-oi957m")},m(e,n){c(e,t,n)},p:e,i:e,o:e,d(e){e&&u(t)}}}class X extends F{constructor(e){super(),I(this,e,null,W,i,{})}}function Z(n){let t;return{c(){t=f("div")},m(e,r){c(e,t,r),n[1](t)},p:e,i:e,o:e,d(e){e&&u(t),n[1](null)}}}function H(e,n,t){let r,o;return a(e,D,(e=>t(2,r=e))),x((()=>{let e;const n=monaco.editor.create(o,{value:r,language:"c",minimap:{enabled:!1},theme:"vs-dark"});return n.onDidChangeModelContent((()=>{e&&clearTimeout(e),e=setTimeout((()=>D.set(n.getValue())),300)})),()=>{clearTimeout(e),n.dispose()}})),[o,function(e){y[e?"unshift":"push"]((()=>{o=e,t(0,o)}))}]}class K extends F{constructor(e){super(),I(this,e,H,Z,i,{})}}function J(n){let t,o,i,a,h,m,x,g;return{c(){t=f("div"),o=f("div"),o.textContent="Scene",i=l(),a=f("div"),a.textContent="Atlas",h=l(),m=f("div"),m.textContent="Rendering",d(o,"class","svelte-zsnrl7"),v(o,"enabled","scene"===n[0]),d(a,"class","svelte-zsnrl7"),v(a,"enabled","atlas"===n[0]),d(m,"class","svelte-zsnrl7"),v(m,"enabled","rendering"===n[0]),d(t,"class","toolbar svelte-zsnrl7")},m(e,r){c(e,t,r),s(t,o),s(t,i),s(t,a),s(t,h),s(t,m),x||(g=[p(o,"click",n[1]("scene")),p(a,"click",n[1]("atlas")),p(m,"click",n[1]("rendering"))],x=!0)},p(e,[n]){1&n&&v(o,"enabled","scene"===e[0]),1&n&&v(a,"enabled","atlas"===e[0]),1&n&&v(m,"enabled","rendering"===e[0])},i:e,o:e,d(e){e&&u(t),x=!1,r(g)}}}function Q(e,n,t){let r;a(e,O,(e=>t(0,r=e)));return[r,e=>()=>{!function(e,n,t){e.set(t)}(O,r=e,r)}]}class ee extends F{constructor(e){super(),I(this,e,Q,J,i,{})}}var ne=1e-6,te="undefined"!=typeof Float32Array?Float32Array:Array,re=Math.PI/180;function oe(){var e=new te(16);return te!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function ie(e,n,t,r){var o=n[0],i=n[1],a=n[2],s=n[3],c=o+o,u=i+i,f=a+a,l=o*c,p=o*u,d=o*f,v=i*u,h=i*f,m=a*f,x=s*c,g=s*u,y=s*f,b=r[0],z=r[1],w=r[2];return e[0]=(1-(v+m))*b,e[1]=(p+y)*b,e[2]=(d-g)*b,e[3]=0,e[4]=(p-y)*z,e[5]=(1-(l+m))*z,e[6]=(h+x)*z,e[7]=0,e[8]=(d+g)*w,e[9]=(h-x)*w,e[10]=(1-(l+v))*w,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}Math.hypot||(Math.hypot=function(){for(var e=0,n=arguments.length;n--;)e+=arguments[n]*arguments[n];return Math.sqrt(e)});var ae=function(e,n,t,r,o){var i,a=1/Math.tan(n/2);return e[0]=a/t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e};function se(){var e=new te(3);return te!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function ce(e,n,t,r){return e[0]=n,e[1]=t,e[2]=r,e}function ue(){var e=new te(2);return te!=Float32Array&&(e[0]=0,e[1]=0),e}function fe(e,n){var t=new te(2);return t[0]=e,t[1]=n,t}function le(e,n,t){return e[0]=n,e[1]=t,e}se(),function(){var e=ue()}();var pe="fn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfn noise3(p: vec3<f32>) -> f32 {\n  let a = floor(p);\n  var d: vec3<f32> = p - a;\n  d = d * d * (3. - 2. * d);\n\n  let b = a.xxyy + vec4<f32>(0., 1., 0., 1.);\n  let k1 = permute4(b.xyxy);\n  let k2 = permute4(k1.xyxy + b.zzww);\n\n  let c = k2 + a.zzzz;\n  let k3 = permute4(c);\n  let k4 = permute4(c + 1.);\n\n  let o1 = fract(k3 * (1. / 41.));\n  let o2 = fract(k4 * (1. / 41.));\n\n  let o3 = o2 * d.z + o1 * (1. - d.z);\n  let o4 = o3.yw * d.x + o3.xz * (1. - d.x);\n\n  return o4.y * d.y + o4.x * (1. - d.y);\n}\n\nfn simplexNoise3(v: vec3<f32>) -> f32 {\n  let C = vec2<f32>(1. / 6., 1. / 3.);\n  let D = vec4<f32>(0., 0.5, 1., 2.);\n\n  var i: vec3<f32>  = floor(v + dot(v, C.yyy));\n  let x0 = v - i + dot(i, C.xxx);\n\n  let g = step(x0.yzx, x0.xyz);\n  let l = 1.0 - g;\n  let i1 = min(g.xyz, l.zxy);\n  let i2 = max(g.xyz, l.zxy);\n\n  let x1 = x0 - i1 + 1. * C.xxx;\n  let x2 = x0 - i2 + 2. * C.xxx;\n  let x3 = x0 - 1. + 3. * C.xxx;\n\n  i = i % vec3<f32>(289.);\n  let p = permute4(permute4(permute4(\n      i.z + vec4<f32>(0., i1.z, i2.z, 1. )) +\n      i.y + vec4<f32>(0., i1.y, i2.y, 1. )) +\n      i.x + vec4<f32>(0., i1.x, i2.x, 1. ));\n\n  var n_: f32 = 1. / 7.;\n  let ns = n_ * D.wyz - D.xzx;\n\n  let j = p - 49. * floor(p * ns.z * ns.z);\n\n  let x_ = floor(j * ns.z);\n  let y_ = floor(j - 7.0 * x_);\n\n  let x = x_ *ns.x + ns.yyyy;\n  let y = y_ *ns.x + ns.yyyy;\n  let h = 1.0 - abs(x) - abs(y);\n\n  let b0 = vec4<f32>( x.xy, y.xy );\n  let b1 = vec4<f32>( x.zw, y.zw );\n\n  let s0 = floor(b0)*2.0 + 1.0;\n  let s1 = floor(b1)*2.0 + 1.0;\n  let sh = -step(h, vec4<f32>(0.));\n\n  let a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  let a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  var p0: vec3<f32> = vec3<f32>(a0.xy, h.x);\n  var p1: vec3<f32> = vec3<f32>(a0.zw, h.y);\n  var p2: vec3<f32> = vec3<f32>(a1.xy, h.z);\n  var p3: vec3<f32> = vec3<f32>(a1.zw, h.w);\n\n  let norm = taylorInvSqrt4(vec4<f32>(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n  p0 = p0 * norm.x;\n  p1 = p1 * norm.y;\n  p2 = p2 * norm.z;\n  p3 = p3 * norm.w;\n\n  var m: vec4<f32> = 0.6 - vec4<f32>(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n  m = max(m, vec4<f32>(0.));\n  m = m * m;\n  return 42. * dot(m * m, vec4<f32>(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n";const de=({count:e,width:n,height:t,generator:r})=>`\n@group(0) @binding(0) var texture : texture_storage_2d_array<rgba8unorm, write>;\n\n${pe}\n\nstruct Atlas {\n  count : i32,\n  width : i32,\n  height : i32,\n  stride : i32,\n  length : i32,\n}\n\nconst atlas : Atlas = Atlas(\n  ${e},\n  ${n},\n  ${t},\n  ${n*t},\n  ${e*n*t},\n);\n\nfn hue2Rgb(p : f32, q : f32, t : f32) -> f32 {\n  var h : f32 = t;\n  if (h < 0) { h += 1; }\n  if (h > 1) { h -= 1; }\n  if (h < 1 / 6.0) { return p + (q - p) * 6 * h; }\n  if (h < 1 / 2.0) { return q; }\n  if (h < 2 / 3.0) { return p + (q - p) * (2.0 / 3.0 - h) * 6; }\n  return p;\n}\n\nfn hsl2Rgba(h : f32, s: f32, l: f32) -> vec4<f32> {\n  var rgba : vec4<f32> = vec4<f32>(0, 0, 0, 1);\n  if (s == 0) {\n    rgba.r = l;\n    rgba.g = l;\n    rgba.b = l;\n  } else {\n    var q : f32;\n    if (l < 0.5) {\n      q = l * (1 + s);\n    } else {\n      q = l + s - l * s;\n    }\n    var p : f32 = 2 * l - q;\n    rgba.r = hue2Rgb(p, q, h + 1 / 3.0);\n    rgba.g = hue2Rgb(p, q, h);\n    rgba.b = hue2Rgb(p, q, h - 1 / 3.0);\n  }\n  return rgba;\n};\n\n${r}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : i32 = i32(GlobalInvocationID.x);\n  if (id >= atlas.length) {\n    return;\n  }\n  var tex : i32 = id / atlas.stride;\n  var index : i32 = id - tex * atlas.stride;\n  var y : i32 = index / atlas.width;\n  var pixel : vec2<i32> = vec2<i32>(index - y * atlas.width, y);\n  textureStore(texture, pixel, tex, getColorAt(tex, pixel));\n}\n`;class ve{constructor({device:e,count:n=254,width:t=16,height:r=16}){this.device=e,this.count=n,this.width=t,this.height=r,this.texture=e.createTexture({dimension:"2d",size:[t,r,n],format:"rgba8unorm",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})}compute(e="\nfn getColorAt(texture : i32, pixel : vec2<i32>) -> vec4<f32> {\n  var h : f32 = f32(texture) / f32(atlas.count);\n  var s : f32 = 0.5;\n  var l : f32 = 0.5;\n  if (pixel.x == 0 || pixel.y == 0 || pixel.x == (atlas.width - 1) || pixel.y == (atlas.height - 1)) {\n    l = min(l * 1.1, 1);\n  }\n  return hsl2Rgba(h, s, l);\n}\n"){if(this.generator===e)return;this.generator=e;const{device:n,count:t,width:r,height:o,texture:i}=this,a=n.createComputePipeline({layout:"auto",compute:{module:n.createShaderModule({code:de({count:t,width:r,height:o,generator:e})}),entryPoint:"main"}}),s=n.createCommandEncoder(),c=s.beginComputePass();c.setPipeline(a),c.setBindGroup(0,n.createBindGroup({layout:a.getBindGroupLayout(0),entries:[{binding:0,resource:i.createView()}]})),c.dispatchWorkgroups(Math.ceil(t*r*o/64)),c.end(),n.queue.submit([s.finish()])}}const he=oe(),me=se(),xe=function(e,n,t){var r=new te(3);return r[0]=e,r[1]=n,r[2]=t,r}(0,1,0);class ge{constructor({device:e,aspect:n=1,fov:t=75,near:r=.1,far:o=1e3}){this.device=e,this.buffer=e.createBuffer({size:41*Float32Array.BYTES_PER_ELEMENT+12,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),this.aspect=n,this.fov=t,this.near=r,this.far=o,this.position=se(),this.target=se(),this.projectionMatrix=oe(),this.viewBuffer=new Float32Array(25),this.viewMatrix=this.viewBuffer.subarray(0,16),this.normalMatrix=this.viewBuffer.subarray(16,25)}setOrbit(e,n,t){const{position:r,target:o}=this,i=Math.sin(e)*t;(function(e,n,t){e[0]=n[0]+t[0],e[1]=n[1]+t[1],e[2]=n[2]+t[2]})(r,o,ce(me,i*Math.sin(n),Math.cos(e)*t,i*Math.cos(n))),this.updateView()}updateProjection(){const{device:e,buffer:n,projectionMatrix:t,aspect:r,fov:o,near:i,far:a}=this;ae(t,function(e){return e*re}(o),r,i,a),e.queue.writeBuffer(n,0,t)}updateView(){const{device:e,buffer:n,viewBuffer:t,viewMatrix:r,normalMatrix:o,position:i,target:a}=this;var s,c,u,f,l,p,d,v,h,m,x,g,y,b,z,w,k,S,E,M,T,_,$;s=r,u=a,f=xe,z=(c=i)[0],w=c[1],k=c[2],S=f[0],E=f[1],M=f[2],T=u[0],_=u[1],$=u[2],Math.abs(z-T)<ne&&Math.abs(w-_)<ne&&Math.abs(k-$)<ne?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(s):(x=z-T,g=w-_,y=k-$,l=E*(y*=b=1/Math.hypot(x,g,y))-M*(g*=b),p=M*(x*=b)-S*y,d=S*g-E*x,(b=Math.hypot(l,p,d))?(l*=b=1/b,p*=b,d*=b):(l=0,p=0,d=0),v=g*d-y*p,h=y*l-x*d,m=x*p-g*l,(b=Math.hypot(v,h,m))?(v*=b=1/b,h*=b,m*=b):(v=0,h=0,m=0),s[0]=l,s[1]=v,s[2]=x,s[3]=0,s[4]=p,s[5]=h,s[6]=g,s[7]=0,s[8]=d,s[9]=m,s[10]=y,s[11]=0,s[12]=-(l*z+p*w+d*k),s[13]=-(v*z+h*w+m*k),s[14]=-(x*z+g*w+y*k),s[15]=1),function(e,n){var t=n[0],r=n[1],o=n[2],i=n[3],a=n[4],s=n[5],c=n[6],u=n[7],f=n[8],l=n[9],p=n[10],d=n[11],v=n[12],h=n[13],m=n[14],x=n[15],g=t*s-r*a,y=t*c-o*a,b=t*u-i*a,z=r*c-o*s,w=r*u-i*s,k=o*u-i*c,S=f*h-l*v,E=f*m-p*v,M=f*x-d*v,T=l*m-p*h,_=l*x-d*h,$=p*x-d*m,P=g*$-y*_+b*T+z*M-w*E+k*S;P&&(P=1/P,e[0]=(s*$-c*_+u*T)*P,e[1]=(c*M-a*$-u*E)*P,e[2]=(a*_-s*M+u*S)*P,e[3]=(o*_-r*$-i*T)*P,e[4]=(t*$-o*M+i*E)*P,e[5]=(r*M-t*_-i*S)*P,e[6]=(h*k-m*w+x*z)*P,e[7]=(m*b-v*k-x*y)*P,e[8]=(v*w-h*b+x*g)*P)}(o,function(e,n){var t=n[0],r=n[1],o=n[2],i=n[3],a=n[4],s=n[5],c=n[6],u=n[7],f=n[8],l=n[9],p=n[10],d=n[11],v=n[12],h=n[13],m=n[14],x=n[15],g=t*s-r*a,y=t*c-o*a,b=t*u-i*a,z=r*c-o*s,w=r*u-i*s,k=o*u-i*c,S=f*h-l*v,E=f*m-p*v,M=f*x-d*v,T=l*m-p*h,_=l*x-d*h,$=p*x-d*m,P=g*$-y*_+b*T+z*M-w*E+k*S;return P?(P=1/P,e[0]=(s*$-c*_+u*T)*P,e[1]=(o*_-r*$-i*T)*P,e[2]=(h*k-m*w+x*z)*P,e[3]=(p*w-l*k-d*z)*P,e[4]=(c*M-a*$-u*E)*P,e[5]=(t*$-o*M+i*E)*P,e[6]=(m*b-v*k-x*y)*P,e[7]=(f*k-p*b+d*y)*P,e[8]=(a*_-s*M+u*S)*P,e[9]=(r*M-t*_-i*S)*P,e[10]=(v*w-h*b+x*g)*P,e[11]=(l*b-f*w-d*g)*P,e[12]=(s*E-a*T-c*S)*P,e[13]=(t*T-r*E+o*S)*P,e[14]=(h*y-v*z-m*g)*P,e[15]=(f*z-l*y+p*g)*P,e):null}(he,r)),e.queue.writeBuffer(n,64,t)}}var ye="const PI : f32 = 3.141592653589793;\n\nfn rotateX(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    1, 0, 0,\n    0, c, s,\n    0, -s, c,\n  );\n}\n\nfn rotateY(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, 0, -s,\n    0, 1, 0,\n    s, 0, c,\n  );\n}\n\nfn rotateZ(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, s, 0,\n    -s, c, 0,\n    0, 0, 1,\n  );\n}\n";class be{constructor({device:e,format:n}){this.device=e,this.descriptor={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},this.effects=(e=>{const n=new Float32Array([0,0,0,.3,.5,.5]),t=e.createBuffer({size:32,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,mappedAtCreation:!0});return new Float32Array(t.getMappedRange()).set(n),t.unmap(),{buffer:t,edges:{get color(){return n.subarray(0,3)},set color(r){n.set(r),e.queue.writeBuffer(t,0,n,0,3)},get intensity(){return n[3]},set intensity(r){n[3]=r,e.queue.writeBuffer(t,12,n,3,1)},get depthScale(){return n[4]},set depthScale(r){n[4]=r,e.queue.writeBuffer(t,16,n,4,1)},get normalScale(){return n[5]},set normalScale(r){n[5]=r,e.queue.writeBuffer(t,20,n,5,1)}}}})(e),this.geometry=(e=>{const n=e.createBuffer({size:18*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set([-1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1]),n.unmap(),n})(e),this.pipeline=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({code:"\n@vertex\nfn main(@location(0) position : vec4<f32>) -> @builtin(position) vec4<f32> {\n  return position;\n}\n"}),entryPoint:"main",buffers:[{arrayStride:3*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]}]},fragment:{module:e.createShaderModule({code:"\nstruct Edges {\n  color : vec3<f32>,\n  intensity : f32,\n  depthScale : f32,\n  normalScale : f32,\n}\n\nstruct Effects {\n  edges : Edges,\n}\n\n@group(0) @binding(0) var<uniform> effects : Effects;\n@group(0) @binding(1) var colorTexture : texture_2d<f32>;\n@group(0) @binding(2) var normalTexture : texture_2d<f32>;\n@group(0) @binding(3) var positionTexture : texture_2d<f32>;\n\nconst offset : vec3<i32> = vec3<i32>(1, 1, 0);\n\nfn edgesDepth(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : f32 = textureLoad(positionTexture, pixel, 0).z;\n  var pixelLeft : f32 = textureLoad(positionTexture, pixel - offset.xz, 0).z;\n  var pixelRight : f32 = textureLoad(positionTexture, pixel + offset.xz, 0).z;\n  var pixelUp : f32 = textureLoad(positionTexture, pixel + offset.zy, 0).z;\n  var pixelDown : f32 = textureLoad(positionTexture, pixel - offset.zy, 0).z;\n  return (\n    abs(pixelLeft    - pixelCenter) \n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter) \n  ) * effects.edges.depthScale;\n}\n\nfn edgesNormal(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : vec3<f32> = textureLoad(normalTexture, pixel, 0).xyz;\n  var pixelLeft : vec3<f32> = textureLoad(normalTexture, pixel - offset.xz, 0).xyz;\n  var pixelRight : vec3<f32> = textureLoad(normalTexture, pixel + offset.xz, 0).xyz;\n  var pixelUp : vec3<f32> = textureLoad(normalTexture, pixel + offset.zy, 0).xyz;\n  var pixelDown : vec3<f32> = textureLoad(normalTexture, pixel - offset.zy, 0).xyz;\n  var edge : vec3<f32> = (\n    abs(pixelLeft    - pixelCenter)\n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter)\n  );\n  return (edge.x + edge.y + edge.z) * effects.edges.normalScale;\n}\n\n@fragment\nfn main(@builtin(position) uv : vec4<f32>) -> @location(0) vec4<f32> {\n  var pixel : vec2<i32> = vec2<i32>(floor(uv.xy));\n  var color : vec3<f32> = textureLoad(colorTexture, pixel, 0).xyz;\n  if (effects.edges.intensity != 0) {\n    color = mix(color, effects.edges.color, clamp(max(edgesDepth(pixel), edgesNormal(pixel)), 0, 1) * effects.edges.intensity);\n  }\n  return vec4<f32>(color, 1);\n}\n"}),entryPoint:"main",targets:[{format:n}]},primitive:{topology:"triangle-list"}})}bindTextures({color:e,normal:n,position:t}){const{device:r,effects:o,pipeline:i}=this;this.bindings=r.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:o.buffer}},{binding:1,resource:e},{binding:2,resource:n},{binding:3,resource:t}]})}render(e,n){const{bindings:t,descriptor:r,geometry:o,pipeline:i}=this;r.colorAttachments[0].view=n;const a=e.beginRenderPass(r);a.setPipeline(i),a.setBindGroup(0,t),a.setVertexBuffer(0,o),a.draw(6,1,0,0),a.end()}}const ze=`\nstruct VertexInput {\n  @location(0) position : vec3<f32>,\n  @location(1) uv : vec2<f32>,\n  @location(2) face : vec4<f32>,\n}\n\nstruct VertexOutput {\n  @builtin(position) position : vec4<f32>,\n  @location(0) viewPosition: vec3<f32>,\n  @location(1) normal: vec3<f32>,\n  @location(2) uv: vec2<f32>,\n  @location(3) @interpolate(flat) texture: i32,\n}\n\nstruct Camera {\n  projection : mat4x4<f32>,\n  view : mat4x4<f32>,\n  normal : mat3x3<f32>,\n}\n\n@group(0) @binding(0) var<uniform> camera : Camera;\n\n${ye}\n\nconst faceNormal : vec3<f32> = vec3<f32>(0, 0, 1);\n\n@vertex\nfn main(voxel : VertexInput) -> VertexOutput {\n  var rotation : mat3x3<f32>;\n  switch (i32(voxel.face.w % 6)) {\n    default {\n      rotation = mat3x3<f32>(\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n      );\n    }\n    case 1 {\n      rotation = rotateX(PI * -0.5);\n    }\n    case 2 {\n      rotation = rotateX(PI * 0.5);\n    }\n    case 3 {\n      rotation = rotateY(PI * -0.5);\n    }\n    case 4 {\n      rotation = rotateY(PI * 0.5);\n    }\n    case 5 {\n      rotation = rotateY(PI);\n    }\n  }\n  var mvPosition : vec4<f32> = camera.view * vec4<f32>(rotation * voxel.position + voxel.face.xyz, 1);\n  var out : VertexOutput;\n  out.position = camera.projection * mvPosition;\n  out.viewPosition = -mvPosition.xyz;\n  out.normal = normalize(camera.normal * rotation * faceNormal);\n  out.uv = voxel.uv;\n  out.texture = i32(floor(voxel.face.w / 6));\n  return out;\n}\n`,we=e=>{const n=e.createBuffer({size:30*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set([-.5,-.5,.5,0,1,.5,-.5,.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,-.5,.5,0,1]),n.unmap(),n};class ke{constructor({adapter:e,device:n,atlas:t=null,camera:r=null,canvas:o=null,samples:i=4}){const a=navigator.gpu.getPreferredCanvasFormat(e);this.atlas=t||new ve({device:n}),this.camera=r||new ge({device:n}),this.canvas=o||document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context=this.canvas.getContext("webgpu"),this.context.configure({alphaMode:"opaque",device:n,format:a}),this.device=n,this.samples=i;const s=n.createRenderPipeline({layout:"auto",vertex:{module:n.createShaderModule({code:ze}),entryPoint:"main",buffers:[{arrayStride:5*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:3*Float32Array.BYTES_PER_ELEMENT,format:"float32x2"}]},{arrayStride:4*Float32Array.BYTES_PER_ELEMENT,stepMode:"instance",attributes:[{shaderLocation:2,offset:0,format:"float32x4"}]}]},fragment:{module:n.createShaderModule({code:"\nstruct FragmentInput {\n  @location(0) position : vec3<f32>,\n  @location(1) normal : vec3<f32>,\n  @location(2) uv : vec2<f32>,\n  @location(3) @interpolate(flat) texture : i32,\n}\n\nstruct FragmentOutput {\n  @location(0) color : vec4<f32>,\n  @location(1) normal : vec4<f32>,\n  @location(2) position : vec4<f32>,\n}\n\n@group(0) @binding(1) var atlas : texture_2d_array<f32>;\n@group(0) @binding(2) var atlasSampler : sampler;\n\n@fragment\nfn main(face : FragmentInput) -> FragmentOutput {\n  var output : FragmentOutput;\n  output.color = textureSample(atlas, atlasSampler, face.uv, face.texture);\n  output.normal = vec4<f32>(normalize(face.normal), 1);\n  output.position = vec4<f32>(face.position, 1);\n  return output;\n}\n"}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"},multisample:{count:this.samples}});this.rendering={bindings:n.createBindGroup({layout:s.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.camera.buffer}},{binding:1,resource:this.atlas.texture.createView()},{binding:2,resource:n.createSampler()}]}),descriptor:{colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},geometry:we(n),pipeline:s},this.postprocessing=new be({device:n,format:a})}render(e,n){const{context:t,postprocessing:r,rendering:{bindings:o,descriptor:i,geometry:a,pipeline:s}}=this,c=e.beginRenderPass(i);c.setPipeline(s),c.setBindGroup(0,o),c.setVertexBuffer(0,a),n.chunks.forEach((({faces:e})=>{c.setVertexBuffer(1,e,16),c.drawIndirect(e,0)})),c.end(),r.render(e,t.getCurrentTexture().createView())}setClearColor(e,n,t){const{rendering:{descriptor:{colorAttachments:[{clearValue:r}]}}}=this;r.r=e,r.g=n,r.b=t}setSize(e,n){const{camera:t,canvas:r,device:o,postprocessing:i,rendering:a,samples:s}=this,c=window.devicePixelRatio||1,u=[Math.floor(e*c),Math.floor(n*c)];r.width=u[0],r.height=u[1],r.style.width=`${e}px`,r.style.height=`${n}px`,t.aspect=e/n,t.updateProjection();const f=(e,n,t,r)=>(e[n]&&e[n].destroy(),e[n]=o.createTexture({size:u,sampleCount:t,format:r,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),e[n].createView());a.descriptor.colorAttachments[0].view=f(a,"colorTexture",s,"rgba8unorm"),a.descriptor.colorAttachments[0].resolveTarget=f(a,"colorTarget",1,"rgba8unorm"),a.descriptor.colorAttachments[1].view=f(a,"normalTexture",s,"rgba16float"),a.descriptor.colorAttachments[1].resolveTarget=f(a,"normalTarget",1,"rgba16float"),a.descriptor.colorAttachments[2].view=f(a,"positionTexture",s,"rgba16float"),a.descriptor.colorAttachments[2].resolveTarget=f(a,"positionTarget",1,"rgba16float"),a.descriptor.depthStencilAttachment.view=f(a,"depthTexture",s,"depth24plus"),i.bindTextures({color:a.colorTarget.createView(),normal:a.normalTarget.createView(),position:a.positionTarget.createView()})}}var Se=({chunkSize:e})=>`\nconst chunkSize : i32 = ${e};\n\nfn getVoxel(pos : vec3<i32>) -> u32 {\n  return u32(pos.z * chunkSize * chunkSize + pos.y * chunkSize + pos.x);\n}\n`;const Ee=({chunkSize:e})=>`\nstruct Faces {\n  vertexCount : u32,\n  instanceCount : atomic<u32>,\n  firstVertex : u32,\n  firstInstance : u32,\n  data : array<f32>,\n}\n\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<storage, read_write> faces : Faces;\n@group(0) @binding(2) var<storage, read> voxels : array<f32>;\n@group(0) @binding(3) var<storage, read> voxels_north : array<f32>;\n@group(0) @binding(4) var<storage, read> voxels_top : array<f32>;\n@group(0) @binding(5) var<storage, read> voxels_bottom : array<f32>;\n@group(0) @binding(6) var<storage, read> voxels_west : array<f32>;\n@group(0) @binding(7) var<storage, read> voxels_east : array<f32>;\n@group(0) @binding(8) var<storage, read> voxels_south : array<f32>;\n\n${Se({chunkSize:e})}\n\nfn isAir(pos : vec3<i32>) -> bool {\n  if (pos.x == -1) {\n    return voxels_west[getVoxel(vec3<i32>(chunkSize - 1, pos.y, pos.z))] == 0;\n  }\n  if (pos.x == chunkSize) {\n    return voxels_east[getVoxel(vec3<i32>(0, pos.y, pos.z))] == 0.0;\n  }\n  if (pos.y == -1) {\n    return voxels_bottom[getVoxel(vec3<i32>(pos.x, chunkSize - 1, pos.z))] == 0;\n  }\n  if (pos.y == chunkSize) {\n    return voxels_top[getVoxel(vec3<i32>(pos.x, 0, pos.z))] == 0;\n  }\n  if (pos.z == -1) {\n    return voxels_south[getVoxel(vec3<i32>(pos.x, pos.y, chunkSize - 1))] == 0;\n  }\n  if (pos.z == chunkSize) {\n    return voxels_north[getVoxel(vec3<i32>(pos.x, pos.y, 0))] == 0;\n  }\n  return voxels[getVoxel(pos)] == 0; \n}\n\nfn pushFace(pos : vec3<i32>, face : i32, texture : i32) {\n  var offset : u32 = atomicAdd(&(faces.instanceCount), 1) * 4;\n  faces.data[offset] = f32(pos.x) + 0.5;\n  faces.data[offset + 1] = f32(pos.y) + 0.5;\n  faces.data[offset + 2] = f32(pos.z) + 0.5;\n  faces.data[offset + 3] = f32(texture * 6 + face);\n}\n\nconst faceNormals = array<vec3<i32>, 6>(\n  vec3<i32>(0, 0, 1),\n  vec3<i32>(0, 1, 0),\n  vec3<i32>(0, -1, 0),\n  vec3<i32>(-1, 0, 0),\n  vec3<i32>(1, 0, 0),\n  vec3<i32>(0, 0, -1),\n);\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  var value : f32 = voxels[getVoxel(pos)];\n  if (value != 0) {\n    var texture : i32 = i32(floor(value) - 1);\n    for (var face : i32 = 0; face < 6; face++) {\n      var npos : vec3<i32> = pos + faceNormals[face];\n      if (isAir(npos)) {\n        pushFace(chunk + pos, face, texture);\n      }\n    }\n  }\n}\n`;class Me{constructor({chunks:e,volume:n}){this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:n.device.createShaderModule({code:Ee({chunkSize:n.chunkSize})}),entryPoint:"main"}});const t={x:0,y:0,z:0},r=(r,o)=>{if(t.x=r.x+o.x,t.y=r.y+o.y,t.z=r.z+o.z,t.x<0||t.x>=e.x||t.y<0||t.y>=e.y||t.z<0||t.z>=e.z)return n.edge;const i=t.z*e.x*e.y+t.y*e.x+t.x;return n.chunks[i].voxels},o=[{x:0,y:0,z:1},{x:0,y:1,z:0},{x:0,y:-1,z:0},{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:0,z:-1}];this.bindings=n.chunks.map((e=>({bindings:n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e.position,e.faces,e.voxels,...o.map((n=>r(e.chunk,n)))].map(((e,n)=>({binding:n,resource:{buffer:e}})))}),chunk:e}))),this.workgroups=Math.ceil(n.chunkSize/4)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((({bindings:n,chunk:o})=>{o.resetInstanceCount(e);const i=e.beginComputePass();i.setPipeline(t),i.setBindGroup(0,n),i.dispatchWorkgroups(r,r,r),i.end()}))}}const Te=({chunkSize:e,source:n,triangles:t})=>`\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<uniform> transform : mat4x4<f32>;\n@group(0) @binding(2) var<storage, read> indices : array<array<u32, 3>>;\n@group(0) @binding(3) var<storage, read> vertices : array<array<f32, 3>>;\n@group(0) @binding(4) var<storage, read_write> voxels : array<f32>;\n\n${Se({chunkSize:e})}\n\nstruct AxisTest {\n  ann : vec3<f32>,\n  fnn : vec3<f32>,\n  aa : i32,\n  bb : i32,\n}\n\nfn intersects(triangle : array<vec3<f32>, 3>, voxel : vec3<f32>) -> bool {\n  var v0 : vec3<f32> = triangle[0] - voxel;\n  var v1 : vec3<f32> = triangle[1] - voxel;\n  var v2 : vec3<f32> = triangle[2] - voxel;\n\n  var f0 : vec3<f32> = v1 - v0;\n  var f1 : vec3<f32> = v2 - v1;\n  var f2 : vec3<f32> = v0 - v2;\n\n  var axis_test = array<AxisTest, 9>(\n    AxisTest(vec3<f32>(0, -f0.z, f0.y), f0, 1, 2),\n    AxisTest(vec3<f32>(0, -f1.z, f1.y), f1, 1, 2),\n    AxisTest(vec3<f32>(0, -f2.z, f2.y), f2, 1, 2),\n    AxisTest(vec3<f32>(f0.z, 0, -f0.x), f0, 0, 2),\n    AxisTest(vec3<f32>(f1.z, 0, -f1.x), f1, 0, 2),\n    AxisTest(vec3<f32>(f2.z, 0, -f2.x), f2, 0, 2),\n    AxisTest(vec3<f32>(-f0.y, f0.x, 0), f0, 0, 1),\n    AxisTest(vec3<f32>(-f1.y, f1.x, 0), f1, 0, 1),\n    AxisTest(vec3<f32>(-f2.y, f2.x, 0), f2, 0, 1),\n  );\n\n  for (var i : i32 = 0; i < 9; i++) {\n    var t : AxisTest = axis_test[i];\n    var p0 : f32 = dot(v0, t.ann);\n    var p1 : f32 = dot(v1, t.ann);\n    var p2 : f32 = dot(v2, t.ann);\n    var r : f32 = 0.5 * abs(t.fnn[t.bb]) + 0.5 * abs(t.fnn[t.aa]);\n    if (max(-max(p0, max(p1, p2)), min(p0, min(p1, p2))) > r) {\n      return false;\n    }\n  }\n\n  if (max(v0.x, max(v1.x, v2.x)) < -0.5 || min(v0.x, min(v1.x, v2.x)) > 0.5) {\n    return false;\n  }\n  if (max(v0.y, max(v1.y, v2.y)) < -0.5 || min(v0.y, min(v1.y, v2.y)) > 0.5) {\n    return false;\n  }\n  if (max(v0.z, max(v1.z, v2.z)) < -0.5 || min(v0.z, min(v1.z, v2.z)) > 0.5) {\n    return false;\n  }\n\n  var planeNorm : vec3<f32> = normalize(cross(f1, f0));\n  var planeConst : f32 = dot(planeNorm, triangle[0]);\n  var r : f32 = 0.5 * abs(planeNorm.x) + 0.5 * abs(planeNorm.y) + 0.5 * abs(planeNorm.z);\n  var s : f32 = abs(dot(planeNorm, voxel) - planeConst);\n  return s <= r;\n}\n\nfn getVertex(index : u32) -> vec3<f32> {\n  var vertex : vec4<f32> = vec4<f32>(vertices[index][0], vertices[index][1], vertices[index][2], 1);\n  return (transform * vertex).xyz - vec3<f32>(chunk);\n}\n\nconst triangles : u32 = ${t};\n\n${n}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : u32 = GlobalInvocationID.x;\n  if (id >= triangles) {\n    return;\n  }\n\n  var triangle = array<vec3<f32>, 3>(\n    getVertex(indices[id][0]),\n    getVertex(indices[id][1]),\n    getVertex(indices[id][2]),\n  );\n\n  var tmin : vec3<i32> = vec3<i32>(chunkSize);\n  var tmax : vec3<i32> = vec3<i32>(0);\n  for (var i : i32 = 0; i < 3; i++) {\n    var p = vec3<i32>(triangle[i]);\n    tmin = min(tmin, p);\n    tmax = max(tmax, p);\n  }\n  tmin = clamp(tmin, vec3<i32>(0), vec3<i32>(chunkSize - 1));\n  tmax = clamp(tmax, vec3<i32>(0), vec3<i32>(chunkSize - 1));\n\n  for (var z : i32 = tmin.z; z <= tmax.z; z++) {\n    for (var y : i32 = tmin.y; y <= tmax.y; y++) {\n      for (var x : i32 = tmin.x; x <= tmax.x; x++) {\n        if (intersects(triangle, vec3<f32>(f32(x) + 0.5, f32(y) + 0.5, f32(z) + 0.5))) {\n          var pos : vec3<i32> = vec3<i32>(x, y, z);\n          voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n        }\n      }\n    }\n  }\n}\n`;class _e{constructor({device:e,position:n=new Float32Array([0,0,0]),rotation:t=new Float32Array([0,0,0,1]),scale:r=new Float32Array([1,1,1])}){this.device=e,this.data=oe(),this.buffer=e.createBuffer({mappedAtCreation:!0,size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),ie(this.data,t,n,r),new Float32Array(this.buffer.getMappedRange()).set(this.data),this.buffer.unmap()}destroy(){const{buffer:e}=this;e.destroy()}set(e,n,t){const{device:r,buffer:o,data:i}=this;ie(i,n,e,t),r.queue.writeBuffer(o,0,i)}}class $e{constructor({geometry:e,volume:n}){const t=e.indices.length/3;this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:n.device.createShaderModule({code:Te({chunkSize:n.chunkSize,source:e.source||"\nfn getValueAt(pos : vec3<f32>) -> f32 {\n  return 1;\n}\n",triangles:t})}),entryPoint:"main"}}),this.transform=new _e({device:n.device,position:e.position,rotation:e.rotation,scale:e.scale}),this.indices=n.device.createBuffer({mappedAtCreation:!0,size:e.indices.byteLength,usage:GPUBufferUsage.STORAGE}),new Uint32Array(this.indices.getMappedRange()).set(e.indices),this.indices.unmap(),this.vertices=n.device.createBuffer({mappedAtCreation:!0,size:e.vertices.byteLength,usage:GPUBufferUsage.STORAGE}),new Float32Array(this.vertices.getMappedRange()).set(e.vertices),this.vertices.unmap(),this.bindings=n.chunks.map((({position:e,voxels:t})=>({bindings:n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e,this.transform.buffer,this.indices,this.vertices,t].map(((e,n)=>({binding:n,resource:{buffer:e}})))}),clearChunk:e=>e.clearBuffer(t)}))),this.workgroups=Math.ceil(t/64)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((({bindings:n,clearChunk:o})=>{o(e);const i=e.beginComputePass();i.setPipeline(t),i.setBindGroup(0,n),i.dispatchWorkgroups(r),i.end()}))}destroy(){const{transform:e,indices:n,vertices:t}=this;e.destroy(),n.destroy(),t.destroy()}}const Pe=({chunkSize:e,width:n,height:t,depth:r,source:o})=>`\n@group(0) @binding(0) var<uniform> time : f32;\n@group(0) @binding(1) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(2) var<storage, read_write> voxels : array<f32>;\n\n${pe}\n${ye}\nfn sdBox(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = abs(p) - r;\n  return length(max(q, vec3<f32>(0))) + min(max(q.x, max(q.y, q.z)), 0);\n}\n\nfn sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = vec3<f32>(p.x, clamp(p.y, -r.y + r.x, r.y - r.x), p.y);\n  return length(q) - q.x;\n}\n\nfn sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var k0 : f32 = length(p / r);\n  var k1 : f32 = length(p / (r * r));\n  return k0 * (k0 - 1.0) / k1;\n}\n\nfn sdSphere(p : vec3<f32>, r : f32) -> f32 {\n  return length(p) - r;\n}\n\nfn sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32 {\n  var q : vec2<f32> = vec2<f32>(length(p.xz) - r.x, p.y);\n  return length(q) - r.y;\n}\n\nfn opUnion(d1 : f32, d2 : f32) -> f32 {\n  return min(d1, d2);\n}\n\nfn opSubstraction(d1 : f32, d2 : f32) -> f32 {\n  return max(d1, -d2);\n}\n\nfn opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 + 0.5 * (d2 - d1) / k, 0, 1);\n  return mix(d2, d1, h) + k * h * (1 - h);\n}\n\nfn opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 - 0.5 * (d2 + d1) / k, 0, 1);\n  return mix(d1, -d2, h) + k * h * (1 - h);\n}\n\n${Se({chunkSize:e})}\n\nstruct Volume {\n  center : vec3<f32>,\n  size : vec3<f32>,\n}\n\nconst volume : Volume = Volume(\n  vec3<f32>(${.5*n}, ${.5*t}, ${.5*r}),\n  vec3<f32>(${n}, ${t}, ${r})\n);\n\n${o}\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n}\n`;class Be{constructor({source:e,volume:n}){this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:n.device.createShaderModule({code:Pe({chunkSize:n.chunkSize,width:n.width,height:n.height,depth:n.depth,source:e})}),entryPoint:"main"}}),this.bindings=n.chunks.map((({position:e,voxels:t})=>n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[n.time.buffer,e,t].map(((e,n)=>({binding:n,resource:{buffer:e}})))}))),this.workgroups=Math.ceil(n.chunkSize/4)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((n=>{const o=e.beginComputePass();o.setPipeline(t),o.setBindGroup(0,n),o.dispatchWorkgroups(r,r,r),o.end()}))}}class Ae{constructor({device:e,chunk:n,chunkSize:t}){this.chunk=n,this.faces=e.createBuffer({mappedAtCreation:!0,size:4*Uint32Array.BYTES_PER_ELEMENT+6*Math.ceil(t*t*t*.5)*4*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX}),new Uint32Array(this.faces.getMappedRange())[0]=6,this.faces.unmap(),this.position=e.createBuffer({mappedAtCreation:!0,size:3*Int32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM}),new Int32Array(this.position.getMappedRange()).set([n.x*t,n.y*t,n.z*t]),this.position.unmap(),this.voxels=Ae.createVoxelsBuffer({device:e,chunkSize:t})}destroy(){const{faces:e,position:n,voxels:t}=this;e.destroy(),n.destroy(),t.destroy()}resetInstanceCount(e){const{faces:n}=this;e.clearBuffer(n,4,4)}static createVoxelsBuffer({device:e,chunkSize:n}){return e.createBuffer({size:n*n*n*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE})}}class Ce{constructor({device:e}){this.device=e,this.data=new Float32Array(1),this.buffer=e.createBuffer({size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM})}destroy(){const{buffer:e}=this;e.destroy()}set(e){const{device:n,buffer:t,data:r}=this;r[0]=e,n.queue.writeBuffer(t,0,r)}}class Ue{constructor({chunkSize:e=100,device:n,width:t,height:r,depth:o}){this.chunkSize=e,this.device=n,this.width=t,this.height=r,this.depth=o;const i={x:Math.ceil(t/e),y:Math.ceil(r/e),z:Math.ceil(o/e)};this.chunks=[];for(let t=0;t<i.z;t++)for(let r=0;r<i.y;r++)for(let o=0;o<i.x;o++)this.chunks.push(new Ae({device:n,chunk:{x:o,y:r,z:t},chunkSize:e}));this.edge=Ae.createVoxelsBuffer({device:n,chunkSize:e}),this.mesher=new Me({chunks:i,volume:this}),this.time=new Ce({device:n})}compute(e,n){const{mesher:t,time:r,voxelizer:o}=this;r.set(n),o.compute(e),t.compute(e)}destroy(){const{chunks:e,edge:n,time:t,voxelizer:r}=this;e.forEach((e=>e.destroy())),n.destroy(),t.destroy(),r&&r.destroy&&r.destroy()}setScene(e){const{voxelizer:n}=this;n&&n.destroy&&n.destroy(),e.geometry?this.voxelizer=new $e({geometry:e.geometry,volume:this}):e.source&&(this.voxelizer=new Be({source:e.source,volume:this}))}}class Ge{constructor(e){this.look={state:fe(.5*Math.PI,0),target:fe(.5*Math.PI,0)},this.pointer={movement:ue(),position:ue()},this.zoom={state:.75,target:.75},this.target=e,this.updateBounds(),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onMouseWheel=this.onMouseWheel.bind(this),e.addEventListener("mousedown",this.onMouseDown,!1),window.addEventListener("mousemove",this.onMouseMove,!1),window.addEventListener("mouseup",this.onMouseUp,!1),window.addEventListener("wheel",this.onMouseWheel,{passive:!1})}destroy(){this.target.removeEventListener("mousedown",this.onMouseDown),window.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("mouseup",this.onMouseUp),window.removeEventListener("wheel",this.onMouseWheel)}onMouseDown({button:e}){const{pointer:n}=this;n.isDown=0===e}onMouseMove({clientX:e,clientY:n,movementX:t,movementY:r}){const{sensitivity:o}=Ge,{bounds:i,pointer:{movement:a,position:s}}=this;a[0]-=t*o.look,a[1]-=r*o.look,le(s,(e-i.x)/i.width*2-1,-(n-i.y)/i.height*2+1)}onMouseUp({button:e}){const{pointer:n}=this;0===e&&(n.isDown=!1)}onMouseWheel(e){e.ctrlKey&&e.preventDefault();const{sensitivity:n,minZoom:t,zoomRange:r}=Ge,{zoom:o}=this,i=Math.min(Math.max((Math.log(o.target)-t)/r+e.deltaY*n.zoom,0),1);o.target=Math.exp(t+i*r)}update(e){const{minPhi:n,maxPhi:t}=Ge,{pointer:r,look:o,zoom:i}=this;r.isDown&&(o.target[1]+=r.movement[0],o.target[0]=Math.min(Math.max(o.target[0]+r.movement[1],n),t));const a=1-Math.exp(-10*e);!function(e,n,t,r){var o=n[0],i=n[1];e[0]=o+r*(t[0]-o),e[1]=i+r*(t[1]-i)}(o.state,o.state,o.target,a),i.state=i.state*(1-a)+i.target*a,le(r.movement,0,0)}updateBounds(){const{target:e}=this;this.bounds=e.getBoundingClientRect()}}function Re(n){let t;return{c(){t=f("div"),d(t,"class","wrapper svelte-jszh57")},m(e,r){c(e,t,r),n[2](t)},p:e,i:e,o:e,d(e){e&&u(t),n[2](null)}}}function Le(e,n,t){let r,{gpu:o}=n;return x((()=>{const e=new Ge(r),n=new ke(o);r.appendChild(n.canvas),n.setClearColor(.1,.1,.1),n.setSize(window.innerWidth,window.innerHeight),n.setSize(e.bounds.width,e.bounds.height),n.atlas.compute(),window.addEventListener("resize",(()=>{e.updateBounds(),n.setSize(e.bounds.width,e.bounds.height)}),!1);const t=new Ue({device:n.device,width:300,height:300,depth:300});ce(n.camera.target,.5*t.width,.5*t.height,.5*t.depth);let i=performance.now()/1e3;const a=()=>{requestAnimationFrame(a);const r=performance.now()/1e3,o=r-i;i=r,e.update(o),n.camera.setOrbit(e.look.state[0],e.look.state[1],t.width*e.zoom.state);const s=n.device.createCommandEncoder();t.compute(s,r),n.render(s,t),n.device.queue.submit([s.finish()])};requestAnimationFrame(a);const s=D.subscribe((e=>t.setScene({source:e})));return()=>{s(),e.destroy(),t.destroy()}})),e.$$set=e=>{"gpu"in e&&t(1,o=e.gpu)},[r,o,function(e){y[e?"unshift":"push"]((()=>{r=e,t(0,r)}))}]}Ge.sensitivity={look:.003,zoom:3e-4},Ge.minPhi=1e-6,Ge.maxPhi=Math.PI-1e-6,Ge.minZoom=Math.log(.25),Ge.maxZoom=Math.log(1.5),Ge.zoomRange=Ge.maxZoom-Ge.minZoom;class Ve extends F{constructor(e){super(),I(this,e,Le,Re,i,{gpu:1})}}function Ie(e){let n,t,r,o,i,a,p,v,h;r=new ee({});const m=[Oe,De,qe],x=[];function g(e,n){return"scene"===e[2]?0:"atlas"===e[2]?1:"rendering"===e[2]?2:-1}return~(i=g(e))&&(a=x[i]=m[i](e)),v=new Ve({props:{gpu:e[0]}}),{c(){n=f("div"),t=f("div"),G(r.$$.fragment),o=l(),a&&a.c(),p=l(),G(v.$$.fragment),d(t,"class","editor svelte-988nyn"),d(n,"class","layout svelte-988nyn")},m(e,a){c(e,n,a),s(n,t),R(r,t,null),s(t,o),~i&&x[i].m(t,null),s(n,p),R(v,n,null),h=!0},p(e,n){let r=i;i=g(e),i!==r&&(a&&(B(),U(x[r],1,1,(()=>{x[r]=null})),A()),~i?(a=x[i],a||(a=x[i]=m[i](e),a.c()),C(a,1),a.m(t,null)):a=null);const o={};1&n&&(o.gpu=e[0]),v.$set(o)},i(e){h||(C(r.$$.fragment,e),C(a),C(v.$$.fragment,e),h=!0)},o(e){U(r.$$.fragment,e),U(a),U(v.$$.fragment,e),h=!1},d(e){e&&u(n),L(r),~i&&x[i].d(),L(v)}}}function Fe(n){let t;return{c(){t=f("div"),t.innerHTML='Sorry! This works only in <a href="https://www.google.com/chrome/canary/" rel="noopener noreferrer" target="_blank" class="svelte-988nyn">Chrome Canary</a>.',d(t,"class","canary svelte-988nyn")},m(e,n){c(e,t,n)},p:e,i:e,o:e,d(e){e&&u(t)}}}function Ne(n){let t;return{c(){t=f("div"),t.textContent="Loading...",d(t,"class","loading svelte-988nyn")},m(e,n){c(e,t,n)},p:e,i:e,o:e,d(e){e&&u(t)}}}function qe(e){let n,t;return n=new X({}),{c(){G(n.$$.fragment)},m(e,r){R(n,e,r),t=!0},i(e){t||(C(n.$$.fragment,e),t=!0)},o(e){U(n.$$.fragment,e),t=!1},d(e){L(n,e)}}}function De(e){let n,t;return n=new j({}),{c(){G(n.$$.fragment)},m(e,r){R(n,e,r),t=!0},i(e){t||(C(n.$$.fragment,e),t=!0)},o(e){U(n.$$.fragment,e),t=!1},d(e){L(n,e)}}}function Oe(e){let n,t;return n=new K({}),{c(){G(n.$$.fragment)},m(e,r){R(n,e,r),t=!0},i(e){t||(C(n.$$.fragment,e),t=!0)},o(e){U(n.$$.fragment,e),t=!1},d(e){L(n,e)}}}function Ye(e){let n,t,r,o,i,a,s;const p=[Ne,Fe,Ie],v=[];function h(e,n){return e[1]?0:e[0]?2:1}return n=h(e),t=v[n]=p[n](e),{c(){t.c(),r=l(),o=f("div"),o.innerHTML='voxeltoy - <a href="https://github.com/danielesteban/voxeltoy" rel="noopener noreferrer" target="_blank" class="svelte-988nyn">view source</a><br/> \n  <a href="https://dani.gatunes.com" rel="noopener noreferrer" target="_blank" class="svelte-988nyn">dani@gatunes</a> © 2022',i=l(),a=f("a"),a.textContent="♥ Become a sponsor",d(o,"class","info svelte-988nyn"),d(a,"class","ribbon svelte-988nyn"),d(a,"href","https://github.com/sponsors/danielesteban"),d(a,"data-ribbon","♥ Become a sponsor"),d(a,"rel","noopener noreferrer"),d(a,"target","_blank")},m(e,t){v[n].m(e,t),c(e,r,t),c(e,o,t),c(e,i,t),c(e,a,t),s=!0},p(e,[o]){let i=n;n=h(e),n===i?v[n].p(e,o):(B(),U(v[i],1,1,(()=>{v[i]=null})),A(),t=v[n],t?t.p(e,o):(t=v[n]=p[n](e),t.c()),C(t,1),t.m(r.parentNode,r))},i(e){s||(C(t),s=!0)},o(e){U(t),s=!1},d(e){v[n].d(e),e&&u(r),e&&u(o),e&&u(i),e&&u(a)}}}function je(e,n,t){let r;a(e,O,(e=>t(2,r=e)));let o=null,i=!0;return Promise.all([(async()=>{if(!navigator.gpu||!navigator.gpu.getPreferredCanvasFormat)throw new Error("WebGPU");const e=await navigator.gpu.requestAdapter(),n=await e.requestDevice();return{adapter:e,device:n}})(),new Promise((e=>{require.config({paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs"}}),require(["vs/editor/editor.main"],e)}))]).then((([e])=>{t(0,o=e)})).catch((e=>{console.error(e)})).finally((()=>{t(1,i=!1)})),[o,i,r]}new class extends F{constructor(e){super(),I(this,e,je,Ye,i,{})}}({target:document.getElementById("app")})}();
